---
import fs from 'fs';
import path from 'path';

// Read events dynamically to ensure we get the latest data
let events = [];
try {
  const eventsPath = path.join(process.cwd(), 'data', 'events.json');
  const eventsData = fs.readFileSync(eventsPath, 'utf-8');
  events = JSON.parse(eventsData);
} catch (error) {
  console.error('Error reading events:', error);
  events = [];
}

// Extract unique values for filter options
const genres = [...new Set(events.map(event => event.genre).filter(Boolean))];
const artists = [...new Set(events.map(event => event.artist))];
const locations = [...new Set(events.map(event => event.location))];
const allTags = [...new Set(events.flatMap(event => event.tags || []))];
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Search Events - Artist Events</title>
    <style>
      body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        margin: 0;
        padding: 20px;
        background-color: #f8f9fa;
        color: #333;
      }

      .container {
        max-width: 1200px;
        margin: 0 auto;
      }

      /* Header */
      .nav-header {
        background: white;
        padding: 1rem 0;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        position: sticky;
        top: 0;
        z-index: 100;
        margin-bottom: 2rem;
      }

      .nav {
        display: flex;
        justify-content: space-between;
        align-items: center;
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
      }

      .logo {
        font-size: 1.5rem;
        font-weight: bold;
        color: #1a1a1a;
        text-decoration: none;
      }

      .nav-links {
        display: flex;
        gap: 2rem;
        list-style: none;
      }

      .nav-links a {
        color: #666;
        text-decoration: none;
        font-weight: 500;
        transition: color 0.3s;
      }

      .nav-links a:hover,
      .nav-links a.active {
        color: #1a1a1a;
      }

      .header {
        text-align: center;
        margin-bottom: 2rem;
        padding: 2rem;
        background: white;
        border-radius: 15px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.1);
      }

      .header h1 {
        color: #2c3e50;
        margin-bottom: 0.5rem;
        font-size: 2.5rem;
      }

      .header p {
        color: #6c757d;
        font-size: 1.1rem;
      }

      .search-container {
        background: white;
        border-radius: 15px;
        padding: 2rem;
        box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        margin-bottom: 2rem;
      }

      .search-form {
        display: grid;
        gap: 1.5rem;
      }

      .search-input-group {
        display: flex;
        gap: 1rem;
        align-items: end;
      }

      .search-input {
        flex: 1;
        padding: 12px 16px;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        font-size: 16px;
        transition: border-color 0.3s;
      }

      .search-input:focus {
        outline: none;
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
      }

      .search-btn {
        padding: 12px 24px;
        background: #667eea;
        color: white;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: background 0.3s;
      }

      .search-btn:hover {
        background: #5a6fd8;
      }

      .filters-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
      }

      .filter-group {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
      }

      .filter-label {
        font-weight: 600;
        color: #2c3e50;
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
      }

      .filter-select {
        padding: 10px 12px;
        border: 2px solid #e9ecef;
        border-radius: 6px;
        background: white;
        font-size: 14px;
        transition: border-color 0.3s;
      }

      .filter-select:focus {
        outline: none;
        border-color: #667eea;
      }

      .tags-section {
        margin-top: 1rem;
      }

      .tags-grid {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin-top: 0.5rem;
      }

      .tag-filter {
        background: #e3f2fd;
        color: #1976d2;
        padding: 0.5rem 0.75rem;
        border: none;
        border-radius: 20px;
        font-size: 0.85rem;
        cursor: pointer;
        transition: all 0.3s;
        border: 2px solid transparent;
      }

      .tag-filter:hover {
        background: #bbdefb;
      }

      .tag-filter.active {
        background: #1976d2;
        color: white;
        border-color: #1976d2;
      }

      .results-section {
        margin-top: 2rem;
      }

      .results-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
        padding: 1rem 1.5rem;
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
      }

      .results-count {
        font-weight: 600;
        color: #2c3e50;
      }

      .clear-filters {
        color: #667eea;
        text-decoration: none;
        font-weight: 500;
        cursor: pointer;
      }

      .clear-filters:hover {
        text-decoration: underline;
      }

      .events-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 1.5rem;
      }

      /* Global styles for dynamically generated event cards */
      :global(.event-card) {
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        transition: all 0.3s;
        text-decoration: none;
        color: inherit;
        border: 1px solid #f0f0f0;
        display: block;
      }

      :global(.event-card:hover) {
        transform: translateY(-3px);
        box-shadow: 0 8px 30px rgba(0,0,0,0.15);
        text-decoration: none;
      }

      :global(.event-title) {
        font-size: 1.2rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: #2c3e50;
      }

      :global(.event-artist) {
        color: #667eea;
        font-weight: 500;
        margin-bottom: 0.5rem;
      }

      :global(.event-meta) {
        display: flex;
        gap: 1rem;
        margin-bottom: 1rem;
        font-size: 0.9rem;
        color: #6c757d;
        flex-wrap: wrap;
      }

      :global(.event-genre) {
        background: #e8f5e8;
        color: #2e7d32;
        padding: 0.25rem 0.5rem;
        border-radius: 12px;
        font-size: 0.8rem;
        font-weight: 500;
      }

      :global(.event-description) {
        color: #666;
        font-size: 0.9rem;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        margin-bottom: 1rem;
      }

      :global(.event-tags) {
        display: flex;
        flex-wrap: wrap;
        gap: 0.25rem;
      }

      :global(.event-tag) {
        background: #f0f0f0;
        color: #666;
        padding: 0.2rem 0.5rem;
        border-radius: 10px;
        font-size: 0.75rem;
      }

      .no-results {
        text-align: center;
        padding: 3rem;
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.1);
      }

      .no-results h3 {
        color: #6c757d;
        margin-bottom: 1rem;
      }

      .back-link {
        color: #667eea;
        text-decoration: none;
        font-weight: 500;
        margin-bottom: 2rem;
        display: inline-block;
      }

      .back-link:hover {
        text-decoration: underline;
      }

      @media (max-width: 768px) {
        .filters-grid {
          grid-template-columns: 1fr;
        }

        .search-input-group {
          flex-direction: column;
        }

        .events-grid {
          grid-template-columns: 1fr;
        }

        .results-header {
          flex-direction: column;
          gap: 1rem;
          text-align: center;
        }
      }
    </style>
  </head>
  <body>
    <!-- Navigation Header -->
    <header class="nav-header">
      <nav class="nav">
        <a href="/" class="logo">ðŸŽµ Artist Events</a>
        <ul class="nav-links">
          <li><a href="/">Home</a></li>
          <li><a href="/events">Events</a></li>
          <li><a href="/blog">Blog</a></li>
          <li><a href="/submit">Submit Event</a></li>
          <li><a href="/search" class="active">Search</a></li>
        </ul>
      </nav>
    </header>

    <div class="container">
      <div class="header">
        <h1>Search Events</h1>
        <p>Find the perfect event for you by searching through our collection</p>
      </div>

      <div class="search-container">
        <form class="search-form" id="searchForm">
          <div class="search-input-group">
            <input 
              type="text" 
              id="searchQuery" 
              class="search-input" 
              placeholder="Search by title, artist, or description..."
            />
            <button type="submit" class="search-btn">Search</button>
          </div>

          <div class="filters-grid">
            <div class="filter-group">
              <label class="filter-label" for="genreFilter">Genre</label>
              <select id="genreFilter" class="filter-select">
                <option value="">All Genres</option>
                {genres.map(genre => (
                  <option value={genre}>{genre}</option>
                ))}
              </select>
            </div>

            <div class="filter-group">
              <label class="filter-label" for="artistFilter">Artist</label>
              <select id="artistFilter" class="filter-select">
                <option value="">All Artists</option>
                {artists.map(artist => (
                  <option value={artist}>{artist}</option>
                ))}
              </select>
            </div>

            <div class="filter-group">
              <label class="filter-label" for="locationFilter">Location</label>
              <select id="locationFilter" class="filter-select">
                <option value="">All Locations</option>
                {locations.map(location => (
                  <option value={location}>{location}</option>
                ))}
              </select>
            </div>

            <div class="filter-group">
              <label class="filter-label" for="dateFilter">Date</label>
              <select id="dateFilter" class="filter-select">
                <option value="">All Dates</option>
                <option value="upcoming">Upcoming</option>
                <option value="past">Past Events</option>
              </select>
            </div>
          </div>

          <div class="tags-section">
            <div class="filter-label">Tags</div>
            <div class="tags-grid">
              {allTags.map(tag => (
                <button type="button" class="tag-filter" data-tag={tag}>
                  {tag}
                </button>
              ))}
            </div>
          </div>
        </form>
      </div>

      <div class="results-section">
        <div class="results-header">
          <div class="results-count" id="resultsCount">
            Showing all {events.length} events
          </div>
          <button class="clear-filters" id="clearFilters">Clear All Filters</button>
        </div>

        <div class="events-grid" id="eventsGrid">
          <!-- Events will be rendered by JavaScript -->
        </div>

        <div class="no-results" id="noResults" style="display: none;">
          <h3>No events found</h3>
          <p>Try adjusting your search criteria or clearing some filters.</p>
        </div>
      </div>
    </div>

    <!-- Set events data on window object FIRST -->
    <script define:vars={{ events }}>
      window.eventsData = events;
    </script>

    <script>
      // Get events data
      let events = [];
      try {
        events = window.eventsData || [];
      } catch (error) {
        console.error('Error loading events data:', error);
        events = [];
      }
      
      let activeFilters = {
        query: '',
        genre: '',
        artist: '',
        location: '',
        date: '',
        tags: []
      };

      // DOM elements
      const searchQuery = document.getElementById('searchQuery');
      const genreFilter = document.getElementById('genreFilter');
      const artistFilter = document.getElementById('artistFilter');
      const locationFilter = document.getElementById('locationFilter');
      const dateFilter = document.getElementById('dateFilter');
      const tagFilters = document.querySelectorAll('.tag-filter');
      const eventsGrid = document.getElementById('eventsGrid');
      const resultsCount = document.getElementById('resultsCount');
      const noResults = document.getElementById('noResults');
      const clearFilters = document.getElementById('clearFilters');

      function performSearch() {
        // Update active filters
        activeFilters.query = searchQuery.value.toLowerCase().trim();
        activeFilters.genre = genreFilter.value;
        activeFilters.artist = artistFilter.value;
        activeFilters.location = locationFilter.value;
        activeFilters.date = dateFilter.value;

        const filteredEvents = events.filter(event => {
          // Text search
          if (activeFilters.query) {
            const searchText = `${event.title || ''} ${event.artist || ''} ${event.description || ''}`.toLowerCase();
            if (!searchText.includes(activeFilters.query)) {
              return false;
            }
          }

          // Genre filter
          if (activeFilters.genre && event.genre !== activeFilters.genre) {
            return false;
          }

          // Artist filter
          if (activeFilters.artist && event.artist !== activeFilters.artist) {
            return false;
          }

          // Location filter
          if (activeFilters.location && event.location !== activeFilters.location) {
            return false;
          }

          // Date filter
          if (activeFilters.date) {
            const eventDate = new Date(event.date);
            const today = new Date();
            today.setHours(0, 0, 0, 0); // Set to start of day
            
            if (activeFilters.date === 'upcoming' && eventDate < today) {
              return false;
            }
            if (activeFilters.date === 'past' && eventDate >= today) {
              return false;
            }
          }

          // Tags filter
          if (activeFilters.tags.length > 0) {
            const eventTags = event.tags || [];
            if (!activeFilters.tags.some(tag => eventTags.includes(tag))) {
              return false;
            }
          }

          return true;
        });

        displayResults(filteredEvents);
      }

      function displayResults(filteredEvents) {
        // Update results count
        resultsCount.textContent = `Showing ${filteredEvents.length} of ${events.length} events`;

        if (filteredEvents.length === 0) {
          eventsGrid.style.display = 'none';
          noResults.style.display = 'block';
        } else {
          eventsGrid.style.display = 'grid';
          noResults.style.display = 'none';

          // Generate HTML for filtered events
          const htmlContent = filteredEvents.map(event => {
            const tagsHtml = event.tags && event.tags.length > 0 ? `
              <div class="event-tags">
                ${event.tags.slice(0, 3).map(tag => `<span class="event-tag">${tag}</span>`).join('')}
                ${event.tags.length > 3 ? `<span class="event-tag">+${event.tags.length - 3} more</span>` : ''}
              </div>
            ` : '';

            return `
              <a href="/events/${event.slug}" class="event-card">
                <div class="event-title">${event.title}</div>
                <div class="event-artist">by ${event.artist}</div>
                <div class="event-meta">
                  <span><strong>Date:</strong> ${event.date}</span>
                  <span><strong>Location:</strong> ${event.location}</span>
                  ${event.genre ? `<span class="event-genre">${event.genre}</span>` : ''}
                </div>
                <div class="event-description">${event.description}</div>
                ${tagsHtml}
              </a>
            `;
          }).join('');
          
          eventsGrid.innerHTML = htmlContent;
        }
      }

      // Event listeners
      document.addEventListener('DOMContentLoaded', function() {
        // Search form submission
        const searchForm = document.getElementById('searchForm');
        if (searchForm) {
          searchForm.addEventListener('submit', (e) => {
            e.preventDefault();
            performSearch();
          });
        }

        // Real-time search on input
        if (searchQuery) {
          searchQuery.addEventListener('input', () => {
            performSearch();
          });
        }

        // Filter changes
        [genreFilter, artistFilter, locationFilter, dateFilter].forEach(filter => {
          if (filter) {
            filter.addEventListener('change', () => {
              performSearch();
            });
          }
        });

        // Tag filters
        tagFilters.forEach(tag => {
          tag.addEventListener('click', () => {
            const tagValue = tag.dataset.tag;
            
            if (activeFilters.tags.includes(tagValue)) {
              activeFilters.tags = activeFilters.tags.filter(t => t !== tagValue);
              tag.classList.remove('active');
            } else {
              activeFilters.tags.push(tagValue);
              tag.classList.add('active');
            }
            performSearch();
          });
        });

        // Clear filters
        if (clearFilters) {
          clearFilters.addEventListener('click', () => {
            searchQuery.value = '';
            genreFilter.value = '';
            artistFilter.value = '';
            locationFilter.value = '';
            dateFilter.value = '';
            tagFilters.forEach(tag => tag.classList.remove('active'));
            activeFilters = {
              query: '',
              genre: '',
              artist: '',
              location: '',
              date: '',
              tags: []
            };
            performSearch();
          });
        }

        // Initial search to show all events
        performSearch();
      });
    </script>
  </body>
</html> 