---
import Layout from '../layouts/Layout.astro';
import ArtistSubscribeButton from '../components/ArtistSubscribeButton.astro';
import { authenticateUser } from '../../lib/auth-middleware.js';

// Require authentication
const authResult = await authenticateUser(Astro.request);
if (!authResult || !authResult.user) {
  Astro.redirect('/auth/login?redirect=/following');
}

const user = authResult.user;
console.log('Following page - authenticated user:', user.id, user.email);

import { Pool } from 'pg';

const connectionString = process.env.NEON_DATABASE_URL || process.env.DATABASE_URL || 
  'postgresql://ishanpathak@localhost:5432/artist_events';

const pool = new Pool({
  connectionString,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
});

// Get user's followed artists
async function getFollowedArtists(userId) {
  const client = await pool.connect();
  try {
    const result = await client.query(`
      SELECT 
        u.id, u.name, u.bio, u.location, u.avatar_url,
        ap.stage_name, ap.genres, ap.verified_artist,
        as_sub.subscribed_at as followed_since,
        COUNT(DISTINCT other_subs.user_id) FILTER (WHERE other_subs.is_subscribed = true) as follower_count
      FROM artist_subscriptions as_sub
      JOIN users u ON as_sub.artist_id = u.id
      LEFT JOIN artist_profiles ap ON u.id = ap.user_id
      LEFT JOIN artist_subscriptions other_subs ON u.id = other_subs.artist_id
      WHERE as_sub.user_id = $1 
        AND as_sub.is_subscribed = true 
        AND u.user_type = 'artist'
        AND u.active = true
      GROUP BY u.id, u.name, u.bio, u.location, u.avatar_url,
               ap.stage_name, ap.genres, ap.verified_artist, as_sub.subscribed_at
      ORDER BY as_sub.subscribed_at DESC
    `, [userId]);
    
    return result.rows;
  } finally {
    client.release();
  }
}

const followedArtists = await getFollowedArtists(user.id);
---

<Layout title="Following - Artist Events">
  <div class="following-container">
    <header class="following-header">
      <div class="header-content">
        <h1 class="page-title">üîî Following</h1>
        <p class="page-subtitle">
          Manage the artists you follow and stay updated on their latest events.
        </p>
        
        <div class="following-stats">
          <div class="stat-item">
            <span class="stat-number">{followedArtists.length}</span>
            <span class="stat-label">Following</span>
          </div>
          <div class="stat-item">
            <span class="stat-number">{followedArtists.filter(a => a.verified_artist).length}</span>
            <span class="stat-label">Verified</span>
          </div>
        </div>
      </div>
    </header>

    <main class="following-content">
      {followedArtists.length > 0 ? (
        <div class="artists-section">
          <div class="section-header">
            <h2 class="section-title">Your Followed Artists</h2>
            <a href="/artists" class="discover-more-btn">
              üîç Discover More
            </a>
          </div>

          <div class="artists-grid">
            {followedArtists.map(artist => (
              <div class="artist-card">
                <div class="artist-header">
                  <div class="artist-avatar">
                    {(artist.stage_name || artist.name).split(' ').map(n => n[0]).join('').toUpperCase()}
                    {artist.verified_artist && (
                      <div class="verified-badge">‚úì</div>
                    )}
                  </div>
                  
                  <div class="artist-info">
                    <h3 class="artist-name">{artist.name}</h3>
                    {artist.stage_name && artist.stage_name !== artist.name && (
                      <div class="artist-stage-name">"{artist.stage_name}"</div>
                    )}
                    <div class="followed-since">
                      Following since {new Date(artist.followed_since).toLocaleDateString('en-US', { 
                        month: 'short', 
                        year: 'numeric' 
                      })}
                    </div>
                  </div>
                </div>

                {artist.bio && (
                  <p class="artist-bio">{artist.bio}</p>
                )}

                <div class="artist-stats">
                  <div class="stat-item-small">
                    <span class="stat-number-small">{artist.follower_count || 0}</span>
                    <span class="stat-label-small">Followers</span>
                  </div>
                  <div class="stat-item-small">
                    <span class="stat-number-small">{artist.location || 'Unknown'}</span>
                    <span class="stat-label-small">Location</span>
                  </div>
                </div>

                <div class="artist-actions">
                  <ArtistSubscribeButton 
                    artistId={artist.id}
                    artistName={artist.stage_name || artist.name}
                    size="sm"
                    variant="secondary"
                    showSubscriberCount={false}
                    isSubscribed={true}
                  />
                  <a href={`/artists/${artist.id}`} class="view-profile-btn">
                    View Profile
                  </a>
                </div>
              </div>
            ))}
          </div>
        </div>
      ) : (
        <div class="empty-state">
          <div class="empty-icon">üé®</div>
          <h3 class="empty-title">You're not following any artists yet</h3>
          <p class="empty-description">
            Start following your favorite artists to get notified about their latest events and updates.
          </p>
          <a href="/artists" class="discover-artists-btn">
            üîç Discover Artists
          </a>
        </div>
      )}
    </main>
  </div>

  <style>
    .following-container {
      min-height: 100vh;
      background: #f8fafc;
    }

    .following-header {
      background: linear-gradient(135deg, #10b981 0%, #059669 100%);
      color: white;
      padding: 4rem 0 2rem;
      text-align: center;
    }

    .header-content {
      max-width: 1000px;
      margin: 0 auto;
      padding: 0 20px;
    }

    .page-title {
      font-size: 3rem;
      font-weight: 700;
      margin-bottom: 1rem;
    }

    .page-subtitle {
      font-size: 1.2rem;
      opacity: 0.9;
      margin-bottom: 2rem;
      max-width: 600px;
      margin-left: auto;
      margin-right: auto;
    }

    .following-stats {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
      gap: 2rem;
      max-width: 300px;
      margin: 0 auto;
    }

    .stat-item {
      text-align: center;
    }

    .stat-number {
      font-size: 2rem;
      font-weight: 700;
      display: block;
      margin-bottom: 0.25rem;
    }

    .stat-label {
      opacity: 0.8;
      font-size: 0.9rem;
    }

    .following-content {
      max-width: 1200px;
      margin: 0 auto;
      padding: 3rem 20px;
    }

    .section-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
      flex-wrap: wrap;
      gap: 1rem;
    }

    .section-title {
      font-size: 1.5rem;
      font-weight: 700;
      color: #1e293b;
    }

    .discover-more-btn {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      padding: 10px 20px;
      background: #10b981;
      color: white;
      text-decoration: none;
      border-radius: 8px;
      font-weight: 500;
      transition: all 0.3s ease;
    }

    .discover-more-btn:hover {
      background: #059669;
      transform: translateY(-2px);
    }

    .artists-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
      gap: 2rem;
    }

    .artist-card {
      background: white;
      border-radius: 16px;
      padding: 2rem;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.05);
      border: 1px solid rgba(226, 232, 240, 0.8);
      transition: all 0.3s ease;
    }

    .artist-card:hover {
      transform: translateY(-4px);
      box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);
    }

    .artist-header {
      display: flex;
      align-items: flex-start;
      gap: 1rem;
      margin-bottom: 1rem;
    }

    .artist-avatar {
      width: 60px;
      height: 60px;
      border-radius: 50%;
      background: linear-gradient(135deg, #10b981, #059669);
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-weight: 700;
      font-size: 1.4rem;
      flex-shrink: 0;
      position: relative;
    }

    .verified-badge {
      position: absolute;
      bottom: -2px;
      right: -2px;
      background: #10b981;
      color: white;
      border-radius: 50%;
      width: 18px;
      height: 18px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 0.7rem;
      border: 2px solid white;
    }

    .artist-info {
      flex: 1;
    }

    .artist-name {
      font-size: 1.2rem;
      font-weight: 700;
      color: #1e293b;
      margin-bottom: 0.25rem;
    }

    .artist-stage-name {
      color: #10b981;
      font-weight: 600;
      margin-bottom: 0.5rem;
      font-size: 0.9rem;
    }

    .followed-since {
      color: #64748b;
      font-size: 0.8rem;
    }

    .artist-bio {
      color: #64748b;
      font-size: 0.9rem;
      line-height: 1.5;
      margin-bottom: 1rem;
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }

    .artist-stats {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 1rem;
      margin-bottom: 1rem;
      padding: 1rem;
      background: #f8fafc;
      border-radius: 12px;
    }

    .stat-item-small {
      text-align: center;
    }

    .stat-number-small {
      font-size: 1rem;
      font-weight: 700;
      color: #1e293b;
      display: block;
    }

    .stat-label-small {
      font-size: 0.65rem;
      color: #64748b;
      text-transform: uppercase;
      font-weight: 500;
    }

    .artist-actions {
      display: flex;
      gap: 0.75rem;
      align-items: center;
    }

    .artist-actions .artist-subscribe-component {
      flex: 1;
    }

    .view-profile-btn {
      padding: 8px 12px;
      background: transparent;
      border: 1px solid #d1d5db;
      border-radius: 6px;
      color: #6b7280;
      text-decoration: none;
      font-size: 0.8rem;
      transition: all 0.3s ease;
      white-space: nowrap;
    }

    .view-profile-btn:hover {
      border-color: #10b981;
      color: #10b981;
    }

    .empty-state {
      text-align: center;
      padding: 4rem 2rem;
      max-width: 500px;
      margin: 0 auto;
    }

    .empty-icon {
      font-size: 4rem;
      margin-bottom: 1rem;
      opacity: 0.5;
    }

    .empty-title {
      font-size: 1.5rem;
      font-weight: 700;
      color: #1e293b;
      margin-bottom: 1rem;
    }

    .empty-description {
      color: #64748b;
      margin-bottom: 2rem;
      line-height: 1.6;
    }

    .discover-artists-btn {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      padding: 12px 24px;
      background: #10b981;
      color: white;
      text-decoration: none;
      border-radius: 8px;
      font-weight: 600;
      transition: all 0.3s ease;
    }

    .discover-artists-btn:hover {
      background: #059669;
      transform: translateY(-2px);
    }

    @media (max-width: 768px) {
      .page-title {
        font-size: 2.5rem;
      }

      .artists-grid {
        grid-template-columns: 1fr;
      }

      .artist-card {
        padding: 1.5rem;
      }

      .artist-actions {
        flex-direction: column;
        gap: 0.75rem;
      }

      .artist-actions .artist-subscribe-component,
      .view-profile-btn {
        width: 100%;
        justify-content: center;
      }
    }
  </style>

  <script>
    // Global subscribe function
    window.toggleSubscription = async function(artistId, artistName) {
      const btn = document.getElementById(`subscribe-btn-${artistId}`);
      if (!btn) return;
      
      const isCurrentlySubscribed = btn.classList.contains('subscribed');
      
      try {
        btn.disabled = true;
        btn.style.opacity = '0.6';
        
        const response = await fetch('/api/artist/subscribe', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            artistId: artistId,
            action: isCurrentlySubscribed ? 'unsubscribe' : 'subscribe'
          })
        });
        
        const result = await response.json();
        
        if (result.success) {
          if (isCurrentlySubscribed) {
            // Remove the card since they unfollowed
            const card = btn.closest('.artist-card');
            if (card) {
              card.style.transition = 'all 0.3s ease';
              card.style.opacity = '0';
              card.style.transform = 'scale(0.95)';
              setTimeout(() => {
                card.remove();
                updateFollowingStats();
              }, 300);
            }
            showNotification(`Unfollowed ${artistName}`);
          }
        } else {
          throw new Error(result.error || 'Subscription failed');
        }
      } catch (error) {
        console.error('Subscription error:', error);
        showNotification('An error occurred. Please try again.', 'error');
      } finally {
        btn.disabled = false;
        btn.style.opacity = '1';
      }
    };

    function updateFollowingStats() {
      const remainingCards = document.querySelectorAll('.artist-card').length;
      const followingCountEl = document.querySelector('.stat-number');
      if (followingCountEl) {
        followingCountEl.textContent = remainingCards;
      }
      
      // Show empty state if no artists left
      if (remainingCards === 0) {
        const artistsSection = document.querySelector('.artists-section');
        if (artistsSection) {
          artistsSection.innerHTML = `
            <div class="empty-state">
              <div class="empty-icon">üé®</div>
              <h3 class="empty-title">You're not following any artists yet</h3>
              <p class="empty-description">
                Start following your favorite artists to get notified about their latest events and updates.
              </p>
              <a href="/artists" class="discover-artists-btn">
                üîç Discover Artists
              </a>
            </div>
          `;
        }
      }
    }

    function showNotification(message, type = 'success') {
      const notification = document.createElement('div');
      notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${type === 'error' ? '#ef4444' : '#10b981'};
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        font-weight: 500;
        z-index: 1001;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        max-width: 300px;
      `;
      notification.textContent = message;
      document.body.appendChild(notification);
      
      setTimeout(() => notification.remove(), 4000);
    }

    // Load subscription states on page load
    document.addEventListener('DOMContentLoaded', async function() {
      try {
        const artistIds = Array.from(document.querySelectorAll('[data-artist-id]'))
          .map(btn => parseInt(btn.dataset.artistId))
          .filter((id, index, arr) => arr.indexOf(id) === index && !isNaN(id));
        
        if (artistIds.length === 0) return;
        
        const response = await fetch('/api/artist/subscription-status', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ artistIds })
        });
        
        if (response.ok) {
          const result = await response.json();
          
          result.subscriptions.forEach(subscription => {
            const btn = document.getElementById(`subscribe-btn-${subscription.artistId}`);
            
            if (btn) {
              // Since this is the following page, all should be subscribed
              btn.classList.remove('unsubscribed');
              btn.classList.add('subscribed');
              btn.querySelector('.btn-text').textContent = 'Following';
              btn.querySelector('.btn-icon').textContent = 'üîî';
            }
          });
        }
      } catch (error) {
        console.error('Error loading subscription states:', error);
      }
    });
  </script>
</Layout> 