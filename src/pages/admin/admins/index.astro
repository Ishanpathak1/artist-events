---
import Layout from '../../../layouts/Layout.astro';
import { Pool } from 'pg';

// Helper function to parse cookies
function parseCookie(cookieString, name) {
  const cookies = cookieString.split(';').map(cookie => cookie.trim());
  for (const cookie of cookies) {
    const [cookieName, cookieValue] = cookie.split('=');
    if (cookieName === name) {
      return decodeURIComponent(cookieValue);
    }
  }
  return null;
}

// Super Admin check
const cookies = Astro.request.headers.get('cookie');
let currentUser = null;
let isSuperAdmin = false;

if (cookies) {
  const sessionToken = parseCookie(cookies, 'session_token');
  if (sessionToken) {
    const connectionString = process.env.NEON_DATABASE_URL || process.env.DATABASE_URL || 
      'postgresql://ishanpathak@localhost:5432/artist_events';
    
    const pool = new Pool({
      connectionString,
      ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
    });

    try {
      const client = await pool.connect();
      const sessionResult = await client.query(
        'SELECT u.* FROM users u JOIN user_sessions s ON u.id = s.user_id WHERE s.session_token = $1 AND s.expires_at > NOW()',
        [sessionToken]
      );
      
      if (sessionResult.rows.length > 0) {
        currentUser = sessionResult.rows[0];
        // Only the super admin can access this page
        isSuperAdmin = currentUser.email === 'ishan.pathak2711@gmail.com' && currentUser.is_super_admin === true;
      }
      client.release();
    } catch (error) {
      console.error('Super admin auth error:', error);
    }
  }
}

if (!isSuperAdmin) {
  return new Response(null, {
    status: 302,
    headers: { Location: '/?error=unauthorized' }
  });
}

// Get admin users and available permissions
async function getAdminData() {
  const connectionString = process.env.NEON_DATABASE_URL || process.env.DATABASE_URL || 
    'postgresql://ishanpathak@localhost:5432/artist_events';
  
  const pool = new Pool({
    connectionString,
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
  });

  const client = await pool.connect();
  try {
    // Get all admin users
    const adminUsers = await client.query(`
      SELECT 
        u.id,
        u.email,
        u.name,
        u.user_type,
        u.is_super_admin,
        u.created_at,
        COALESCE(
          ARRAY_AGG(p.name ORDER BY p.name) FILTER (WHERE p.name IS NOT NULL),
          '{}'
        ) as permissions
      FROM users u
      LEFT JOIN user_admin_permissions uap ON u.id = uap.user_id
      LEFT JOIN admin_permissions p ON uap.permission_id = p.id
      WHERE u.user_type = 'admin'
      GROUP BY u.id, u.email, u.name, u.user_type, u.is_super_admin, u.created_at
      ORDER BY u.is_super_admin DESC, u.created_at ASC
    `);

    // Get all available permissions
    const permissions = await client.query(`
      SELECT * FROM admin_permissions ORDER BY category, name
    `);

    return {
      adminUsers: adminUsers.rows,
      permissions: permissions.rows
    };
  } finally {
    client.release();
  }
}

const { adminUsers, permissions } = await getAdminData();
const permissionsByCategory = permissions.reduce((acc, perm) => {
  if (!acc[perm.category]) acc[perm.category] = [];
  acc[perm.category].push(perm);
  return acc;
}, {});
---

<Layout title="Admin Management - Admin Dashboard">
  <div class="admin-dashboard">
    <!-- Admin Header -->
    <header class="admin-header">
      <div class="admin-header-content">
        <div class="admin-brand">
          <h1>⚙️ Admin Management</h1>
          <p>Manage admin access and permissions</p>
        </div>
        <div class="admin-actions">
          <a href="/admin" class="btn btn-secondary">← Back to Dashboard</a>
          <button id="logoutBtn" class="btn btn-danger">Logout</button>
        </div>
      </div>
    </header>

    <!-- Admin Navigation -->
    <nav class="admin-nav">
      <div class="admin-nav-content">
        <a href="/admin" class="admin-nav-link">📊 Overview</a>
        <a href="/admin/users" class="admin-nav-link">👥 Users</a>
        <a href="/admin/events" class="admin-nav-link">🎪 Events</a>
        <a href="/admin/blogs" class="admin-nav-link">📝 Blogs</a>
        <a href="/admin/admins" class="admin-nav-link active">⚙️ Admins</a>
      </div>
    </nav>

    <!-- Main Content -->
    <main class="admin-main">
      <!-- Grant Access Section -->
      <section class="grant-access-section">
        <div class="section-header">
          <h2>Grant Admin Access</h2>
          <p>Grant admin privileges to existing users</p>
        </div>
        
        <div class="grant-form-container">
          <form id="grantAccessForm" class="grant-form">
            <div class="form-group">
              <label for="userEmail">User Email</label>
              <input type="email" id="userEmail" name="email" required 
                     placeholder="Enter user email to grant admin access" />
            </div>
            
            <div class="form-group">
              <label>Permissions (leave empty to grant all)</label>
              <div class="permissions-grid">
                {Object.entries(permissionsByCategory).map(([category, perms]) => (
                  <div class="permission-category">
                    <h4>{category.charAt(0).toUpperCase() + category.slice(1)}</h4>
                    {perms.map(perm => (
                      <label class="permission-item">
                        <input type="checkbox" name="permissions" value={perm.name} />
                        <span>{perm.description}</span>
                      </label>
                    ))}
                  </div>
                ))}
              </div>
            </div>
            
            <div class="form-actions">
              <button type="submit" class="btn btn-primary">Grant Admin Access</button>
            </div>
          </form>
        </div>
      </section>

      <!-- Current Admins Section -->
      <section class="admins-section">
        <div class="section-header">
          <h2>Current Admins ({adminUsers.length})</h2>
          <p>Manage existing admin users</p>
        </div>
        
        <div class="admins-grid">
          {adminUsers.map(admin => (
            <div class="admin-card" data-admin-id={admin.id}>
              <div class="admin-header-card">
                <div class="admin-info">
                  <div class="admin-avatar">
                    {admin.name ? admin.name.charAt(0).toUpperCase() : admin.email.charAt(0).toUpperCase()}
                  </div>
                  <div class="admin-details">
                    <h3>{admin.name || 'No Name'}</h3>
                    <p>{admin.email}</p>
                    {admin.is_super_admin && (
                      <span class="super-admin-badge">🔒 Super Admin</span>
                    )}
                  </div>
                </div>
                
                <div class="admin-meta">
                  <span class="admin-since">
                    Admin since {new Date(admin.created_at).toLocaleDateString()}
                  </span>
                </div>
              </div>

              <div class="admin-permissions">
                <h4>Permissions</h4>
                <div class="permissions-list">
                  {admin.permissions.length > 0 ? (
                    admin.permissions.map(perm => (
                      <span class="permission-tag">{perm}</span>
                    ))
                  ) : (
                    <span class="no-permissions">No specific permissions</span>
                  )}
                </div>
              </div>

              <div class="admin-actions-card">
                {!admin.is_super_admin && (
                  <button class="btn btn-danger btn-sm revoke-access" data-email={admin.email}>
                    🚫 Revoke Access
                  </button>
                )}
                {admin.is_super_admin && (
                  <span class="super-admin-note">Cannot revoke super admin</span>
                )}
              </div>
            </div>
          ))}
        </div>
      </section>
    </main>
  </div>

  <!-- Success/Error Messages -->
  <div id="messageContainer" class="message-container"></div>
</Layout>

<style>
  .admin-dashboard {
    min-height: 100vh;
    background: #f8fafc;
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  }

  /* Admin Header */
  .admin-header {
    background: white;
    border-bottom: 1px solid #e2e8f0;
    padding: 1rem 0;
  }

  .admin-header-content {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 2rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .admin-brand h1 {
    font-size: 1.5rem;
    font-weight: 700;
    color: #1e293b;
    margin-bottom: 0.25rem;
  }

  .admin-brand p {
    color: #64748b;
    margin: 0;
  }

  .admin-actions {
    display: flex;
    gap: 1rem;
    align-items: center;
  }

  /* Admin Navigation */
  .admin-nav {
    background: white;
    border-bottom: 1px solid #e2e8f0;
    padding: 0;
  }

  .admin-nav-content {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 2rem;
    display: flex;
    gap: 2rem;
  }

  .admin-nav-link {
    display: flex;
    align-items: center;
    padding: 1rem 0;
    text-decoration: none;
    color: #64748b;
    font-weight: 500;
    border-bottom: 3px solid transparent;
    transition: all 0.3s ease;
  }

  .admin-nav-link:hover,
  .admin-nav-link.active {
    color: #667eea;
    border-bottom-color: #667eea;
  }

  /* Main Content */
  .admin-main {
    max-width: 1400px;
    margin: 0 auto;
    padding: 2rem;
  }

  /* Section Headers */
  .section-header {
    margin-bottom: 2rem;
  }

  .section-header h2 {
    font-size: 1.5rem;
    font-weight: 700;
    color: #1e293b;
    margin-bottom: 0.5rem;
  }

  .section-header p {
    color: #64748b;
    margin: 0;
  }

  /* Grant Access Section */
  .grant-access-section {
    background: white;
    border-radius: 12px;
    padding: 2rem;
    margin-bottom: 3rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .grant-form-container {
    max-width: 800px;
  }

  .form-group {
    margin-bottom: 2rem;
  }

  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 600;
    color: #374151;
  }

  .form-group input[type="email"] {
    width: 100%;
    padding: 0.75rem;
    border: 2px solid #e2e8f0;
    border-radius: 8px;
    font-size: 1rem;
    transition: border-color 0.3s ease;
  }

  .form-group input[type="email"]:focus {
    outline: none;
    border-color: #667eea;
  }

  .permissions-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 2rem;
    margin-top: 1rem;
  }

  .permission-category h4 {
    color: #1e293b;
    margin-bottom: 1rem;
    font-size: 1.1rem;
    border-bottom: 2px solid #e2e8f0;
    padding-bottom: 0.5rem;
  }

  .permission-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 0.75rem;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 6px;
    transition: background-color 0.3s ease;
  }

  .permission-item:hover {
    background: #f8fafc;
  }

  .permission-item input[type="checkbox"] {
    width: 1.2rem;
    height: 1.2rem;
  }

  .permission-item span {
    color: #4b5563;
    font-size: 0.9rem;
  }

  /* Admins Section */
  .admins-section {
    background: white;
    border-radius: 12px;
    padding: 2rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .admins-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    gap: 2rem;
  }

  .admin-card {
    border: 1px solid #e2e8f0;
    border-radius: 12px;
    padding: 1.5rem;
    background: #f8fafc;
    transition: transform 0.3s ease;
  }

  .admin-card:hover {
    transform: translateY(-2px);
  }

  .admin-header-card {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 1.5rem;
  }

  .admin-info {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .admin-avatar {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    background: linear-gradient(135deg, #667eea, #764ba2);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: 600;
    font-size: 1.2rem;
  }

  .admin-details h3 {
    margin: 0 0 0.25rem 0;
    color: #1e293b;
    font-weight: 600;
  }

  .admin-details p {
    margin: 0;
    color: #64748b;
    font-size: 0.9rem;
  }

  .super-admin-badge {
    display: inline-block;
    background: #fbbf24;
    color: #92400e;
    padding: 0.25rem 0.75rem;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 600;
    margin-top: 0.5rem;
  }

  .admin-meta {
    text-align: right;
  }

  .admin-since {
    color: #64748b;
    font-size: 0.8rem;
  }

  .admin-permissions {
    margin-bottom: 1.5rem;
  }

  .admin-permissions h4 {
    color: #1e293b;
    margin-bottom: 1rem;
    font-size: 1rem;
  }

  .permissions-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .permission-tag {
    background: #e0e7ff;
    color: #3730a3;
    padding: 0.25rem 0.75rem;
    border-radius: 12px;
    font-size: 0.8rem;
    font-weight: 500;
  }

  .no-permissions {
    color: #9ca3af;
    font-style: italic;
    font-size: 0.9rem;
  }

  .admin-actions-card {
    display: flex;
    justify-content: flex-end;
    align-items: center;
  }

  .super-admin-note {
    color: #9ca3af;
    font-size: 0.85rem;
    font-style: italic;
  }

  /* Buttons */
  .btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    text-decoration: none;
    font-weight: 600;
    font-size: 0.9rem;
    border: none;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .btn-sm {
    padding: 0.5rem 1rem;
    font-size: 0.8rem;
  }

  .btn-primary {
    background: #667eea;
    color: white;
  }

  .btn-primary:hover {
    background: #5a67d8;
  }

  .btn-secondary {
    background: #e2e8f0;
    color: #475569;
  }

  .btn-secondary:hover {
    background: #cbd5e1;
  }

  .btn-danger {
    background: #ef4444;
    color: white;
  }

  .btn-danger:hover {
    background: #dc2626;
  }

  .form-actions {
    margin-top: 2rem;
  }

  /* Message Container */
  .message-container {
    position: fixed;
    top: 2rem;
    right: 2rem;
    z-index: 1000;
  }

  .message {
    padding: 1rem 1.5rem;
    border-radius: 8px;
    margin-bottom: 1rem;
    font-weight: 500;
    animation: slideIn 0.3s ease;
  }

  .message.success {
    background: #dcfce7;
    color: #166534;
    border: 1px solid #bbf7d0;
  }

  .message.error {
    background: #fee2e2;
    color: #dc2626;
    border: 1px solid #fecaca;
  }

  @keyframes slideIn {
    from { transform: translateX(100%); opacity: 0; }
    to { transform: translateX(0); opacity: 1; }
  }

  /* Responsive */
  @media (max-width: 768px) {
    .admin-header-content {
      flex-direction: column;
      gap: 1rem;
    }

    .admin-nav-content {
      flex-wrap: wrap;
      gap: 1rem;
    }

    .admin-main {
      padding: 1rem;
    }

    .permissions-grid {
      grid-template-columns: 1fr;
    }

    .admins-grid {
      grid-template-columns: 1fr;
    }

    .admin-header-card {
      flex-direction: column;
      gap: 1rem;
    }
  }
</style>

<script>
  // Message utility
  function showMessage(message, type = 'success') {
    const container = document.getElementById('messageContainer');
    const messageEl = document.createElement('div');
    messageEl.className = `message ${type}`;
    messageEl.textContent = message;
    container.appendChild(messageEl);
    
    setTimeout(() => {
      messageEl.remove();
    }, 5000);
  }

  // Grant admin access form
  document.getElementById('grantAccessForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const email = formData.get('email');
    const permissions = formData.getAll('permissions');
    
    try {
      const response = await fetch('/api/admin/grant-access', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, permissions })
      });
      
      const result = await response.json();
      
      if (response.ok) {
        showMessage(`Admin access granted to ${email}`, 'success');
        setTimeout(() => location.reload(), 2000);
      } else {
        showMessage(result.error || 'Failed to grant admin access', 'error');
      }
    } catch (error) {
      showMessage('Failed to grant admin access', 'error');
    }
  });

  // Revoke admin access
  document.addEventListener('click', async (e) => {
    if (e.target.classList.contains('revoke-access')) {
      const email = e.target.dataset.email;
      
      if (confirm(`Are you sure you want to revoke admin access for ${email}?`)) {
        try {
          const response = await fetch(`/api/admin/grant-access?email=${encodeURIComponent(email)}`, {
            method: 'DELETE'
          });
          
          const result = await response.json();
          
          if (response.ok) {
            showMessage(`Admin access revoked for ${email}`, 'success');
            setTimeout(() => location.reload(), 2000);
          } else {
            showMessage(result.error || 'Failed to revoke admin access', 'error');
          }
        } catch (error) {
          showMessage('Failed to revoke admin access', 'error');
        }
      }
    }
  });

  // Logout functionality
  document.getElementById('logoutBtn')?.addEventListener('click', async () => {
    try {
      const response = await fetch('/api/auth/logout', { method: 'POST' });
      if (response.ok) {
        window.location.href = '/';
      }
    } catch (error) {
      console.error('Logout failed:', error);
    }
  });
</script> 