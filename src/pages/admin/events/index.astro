---
import Layout from '../../../layouts/Layout.astro';
import { Pool } from 'pg';

// Helper function to parse cookies
function parseCookie(cookieString, name) {
  const cookies = cookieString.split(';').map(cookie => cookie.trim());
  for (const cookie of cookies) {
    const [cookieName, cookieValue] = cookie.split('=');
    if (cookieName === name) {
      return decodeURIComponent(cookieValue);
    }
  }
  return null;
}

// Admin check
const cookies = Astro.request.headers.get('cookie');
let currentUser = null;
let isAdmin = false;

if (cookies) {
  const sessionToken = parseCookie(cookies, 'session_token');
  if (sessionToken) {
    const connectionString = process.env.NEON_DATABASE_URL || process.env.DATABASE_URL || 
      'postgresql://ishanpathak@localhost:5432/artist_events';
    
    const pool = new Pool({
      connectionString,
      ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
    });

    try {
      const client = await pool.connect();
      const sessionResult = await client.query(
        'SELECT u.* FROM users u JOIN user_sessions s ON u.id = s.user_id WHERE s.session_token = $1 AND s.expires_at > NOW()',
        [sessionToken]
      );
      
      if (sessionResult.rows.length > 0) {
        currentUser = sessionResult.rows[0];
        isAdmin = currentUser.email === 'ishan.pathak2711@gmail.com' || 
                 currentUser.user_type === 'admin' || 
                 currentUser.is_super_admin === true;
      }
      client.release();
    } catch (error) {
      console.error('Admin auth error:', error);
    }
  }
}

if (!isAdmin) {
  return new Response(null, {
    status: 302,
    headers: { Location: '/?error=unauthorized' }
  });
}

// Get all events with creator info
async function getAllEvents() {
  const connectionString = process.env.NEON_DATABASE_URL || process.env.DATABASE_URL || 
    'postgresql://ishanpathak@localhost:5432/artist_events';
  
  const pool = new Pool({
    connectionString,
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
  });

  const client = await pool.connect();
  try {
    const eventsResult = await client.query(`
      SELECT 
        e.*,
        u.name as creator_name,
        u.email as creator_email,
        u.user_type as creator_type,
        v.name as venue_name,
        v.city,
        v.state,
        COALESCE(ARRAY_AGG(DISTINCT t.name) FILTER (WHERE t.name IS NOT NULL), '{}') as tags
      FROM events e
      JOIN users u ON e.created_by = u.id
      LEFT JOIN venues v ON e.venue_id = v.id
      LEFT JOIN event_tags et ON e.id = et.event_id
      LEFT JOIN tags t ON et.tag_id = t.id
      GROUP BY e.id, u.name, u.email, u.user_type, v.name, v.city, v.state
      ORDER BY e.created_at DESC
    `);

    return eventsResult.rows;
  } finally {
    client.release();
  }
}

const events = await getAllEvents();
---

<Layout title="Event Management - Admin Dashboard">
  <div class="admin-dashboard">
    <!-- Admin Header -->
    <header class="admin-header">
      <div class="admin-header-content">
        <div class="admin-brand">
          <h1>🎪 Event Management</h1>
          <p>Manage all platform events</p>
        </div>
        <div class="admin-actions">
          <a href="/admin" class="btn btn-secondary">← Back to Dashboard</a>
          <button id="logoutBtn" class="btn btn-danger">Logout</button>
        </div>
      </div>
    </header>

    <!-- Admin Navigation -->
    <nav class="admin-nav">
      <div class="admin-nav-content">
        <a href="/admin" class="admin-nav-link">📊 Overview</a>
        <a href="/admin/users" class="admin-nav-link">👥 Users</a>
        <a href="/admin/events" class="admin-nav-link active">🎪 Events</a>
        <a href="/admin/blogs" class="admin-nav-link">📝 Blogs</a>
        <a href="/admin/settings" class="admin-nav-link">⚙️ Settings</a>
      </div>
    </nav>

    <!-- Main Content -->
    <main class="admin-main">
      <!-- Controls -->
      <section class="controls-section">
        <div class="controls-header">
          <h2>All Events ({events.length})</h2>
          <div class="header-actions">
            <button id="bulkApproveBtn" class="btn btn-success">Bulk Approve</button>
            <button id="bulkDeleteBtn" class="btn btn-danger">Bulk Delete</button>
          </div>
        </div>
        
        <!-- Search and Filters -->
        <div class="controls-bar">
          <div class="search-box">
            <input type="text" id="eventSearch" placeholder="Search events by title, creator, venue..." />
            <span class="search-icon">🔍</span>
          </div>
          
          <div class="filter-controls">
            <select id="statusFilter">
              <option value="">All Status</option>
              <option value="published">Published</option>
              <option value="draft">Draft</option>
              <option value="pending">Pending</option>
              <option value="cancelled">Cancelled</option>
            </select>
            
            <select id="creatorTypeFilter">
              <option value="">All Creators</option>
              <option value="artist">Artists</option>
              <option value="audience">Audience</option>
              <option value="admin">Admins</option>
            </select>
            
            <select id="sortBy">
              <option value="created_desc">Newest First</option>
              <option value="created_asc">Oldest First</option>
              <option value="title_asc">Title A-Z</option>
              <option value="date_asc">Event Date</option>
            </select>
          </div>
        </div>
      </section>

      <!-- Events Grid -->
      <section class="events-section">
        <div class="events-grid" id="eventsGrid">
          {events.map(event => (
            <div class="event-card" data-event-id={event.id} data-status={event.status} data-creator-type={event.creator_type}>
              <div class="event-header">
                <div class="event-checkbox">
                  <input type="checkbox" class="event-select" value={event.id} />
                </div>
                <div class="event-status">
                  <span class={`status-badge ${event.status}`}>
                    {event.status === 'published' ? '✅' : event.status === 'draft' ? '📝' : event.status === 'pending' ? '⏳' : '❌'} 
                    {event.status}
                  </span>
                </div>
              </div>

              <div class="event-image">
                {event.featured_image ? (
                  <img src={event.featured_image} alt={event.title} />
                ) : (
                  <div class="event-placeholder">🎪</div>
                )}
              </div>

              <div class="event-content">
                <h3 class="event-title">{event.title}</h3>
                
                <div class="event-meta">
                  <div class="event-creator">
                    <span class="creator-info">
                      <strong>{event.creator_name}</strong>
                      <span class={`creator-type ${event.creator_type}`}>({event.creator_type})</span>
                    </span>
                    <span class="creator-email">{event.creator_email}</span>
                  </div>
                  
                  <div class="event-details">
                    <div class="event-location">
                      📍 {event.venue_name ? `${event.venue_name}, ${event.city}, ${event.state}` : 'TBD'}
                    </div>
                    <div class="event-date">
                      📅 {event.start_date ? new Date(event.start_date).toLocaleDateString() : 'TBD'}
                      {event.start_time && ` at ${event.start_time}`}
                    </div>
                    <div class="event-price">
                      💰 {event.ticket_price ? (event.ticket_price === 0 ? 'Free' : `$${event.ticket_price}`) : 'TBD'}
                    </div>
                  </div>

                  {event.tags && event.tags.length > 0 && (
                    <div class="event-tags">
                      {event.tags.slice(0, 3).map(tag => (
                        <span class="tag">{tag}</span>
                      ))}
                      {event.tags.length > 3 && <span class="tag-more">+{event.tags.length - 3}</span>}
                    </div>
                  )}
                </div>

                <div class="event-actions">
                  <button class="btn btn-sm btn-info view-event" data-event-id={event.id}>
                    👁️ View
                  </button>
                  <button class="btn btn-sm btn-secondary edit-event" data-event-id={event.id}>
                    ✏️ Edit
                  </button>
                  {event.status === 'pending' && (
                    <button class="btn btn-sm btn-success approve-event" data-event-id={event.id}>
                      ✅ Approve
                    </button>
                  )}
                  {event.status === 'published' && (
                    <button class="btn btn-sm btn-warning unpublish-event" data-event-id={event.id}>
                      📝 Unpublish
                    </button>
                  )}
                  <button class="btn btn-sm btn-danger delete-event" data-event-id={event.id}>
                    🗑️ Delete
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      </section>
    </main>
  </div>

  <!-- Event Modal -->
  <div id="eventModal" class="modal">
    <div class="modal-content modal-large">
      <div class="modal-header">
        <h3 id="modalTitle">Event Details</h3>
        <button class="modal-close" id="closeModal">×</button>
      </div>
      <div class="modal-body" id="modalBody">
        <!-- Dynamic content will be loaded here -->
      </div>
    </div>
  </div>
</Layout>

<style>
  .admin-dashboard {
    min-height: 100vh;
    background: #f8fafc;
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  }

  /* Admin Header */
  .admin-header {
    background: white;
    border-bottom: 1px solid #e2e8f0;
    padding: 1rem 0;
  }

  .admin-header-content {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 2rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .admin-brand h1 {
    font-size: 1.5rem;
    font-weight: 700;
    color: #1e293b;
    margin-bottom: 0.25rem;
  }

  .admin-brand p {
    color: #64748b;
    margin: 0;
  }

  .admin-actions {
    display: flex;
    gap: 1rem;
    align-items: center;
  }

  /* Admin Navigation */
  .admin-nav {
    background: white;
    border-bottom: 1px solid #e2e8f0;
    padding: 0;
  }

  .admin-nav-content {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 2rem;
    display: flex;
    gap: 2rem;
  }

  .admin-nav-link {
    display: flex;
    align-items: center;
    padding: 1rem 0;
    text-decoration: none;
    color: #64748b;
    font-weight: 500;
    border-bottom: 3px solid transparent;
    transition: all 0.3s ease;
  }

  .admin-nav-link:hover,
  .admin-nav-link.active {
    color: #667eea;
    border-bottom-color: #667eea;
  }

  /* Main Content */
  .admin-main {
    max-width: 1400px;
    margin: 0 auto;
    padding: 2rem;
  }

  /* Controls Section */
  .controls-section {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    margin-bottom: 2rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .controls-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
  }

  .controls-header h2 {
    font-size: 1.25rem;
    font-weight: 600;
    color: #1e293b;
  }

  .header-actions {
    display: flex;
    gap: 1rem;
  }

  .controls-bar {
    display: flex;
    gap: 1rem;
    align-items: center;
    flex-wrap: wrap;
  }

  .search-box {
    position: relative;
    flex: 1;
    min-width: 300px;
  }

  .search-box input {
    width: 100%;
    padding: 0.75rem 2.5rem 0.75rem 1rem;
    border: 2px solid #e2e8f0;
    border-radius: 8px;
    font-size: 0.9rem;
    transition: border-color 0.3s ease;
  }

  .search-box input:focus {
    outline: none;
    border-color: #667eea;
  }

  .search-icon {
    position: absolute;
    right: 1rem;
    top: 50%;
    transform: translateY(-50%);
    color: #64748b;
  }

  .filter-controls {
    display: flex;
    gap: 1rem;
  }

  .filter-controls select {
    padding: 0.75rem;
    border: 2px solid #e2e8f0;
    border-radius: 8px;
    background: white;
    font-size: 0.9rem;
    cursor: pointer;
  }

  /* Events Grid */
  .events-section {
    background: white;
    border-radius: 12px;
    padding: 2rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .events-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 2rem;
  }

  .event-card {
    background: white;
    border: 1px solid #e2e8f0;
    border-radius: 12px;
    overflow: hidden;
    transition: all 0.3s ease;
  }

  .event-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  }

  .event-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    background: #f8fafc;
  }

  .event-checkbox input {
    width: 1.2rem;
    height: 1.2rem;
    cursor: pointer;
  }

  .event-image {
    height: 200px;
    overflow: hidden;
    position: relative;
  }

  .event-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .event-placeholder {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
    font-size: 3rem;
  }

  .event-content {
    padding: 1.5rem;
  }

  .event-title {
    font-size: 1.2rem;
    font-weight: 600;
    color: #1e293b;
    margin-bottom: 1rem;
    line-height: 1.3;
  }

  .event-meta {
    margin-bottom: 1.5rem;
  }

  .event-creator {
    margin-bottom: 1rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid #f1f5f9;
  }

  .creator-info {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 0.25rem;
  }

  .creator-type {
    padding: 0.125rem 0.5rem;
    border-radius: 4px;
    font-size: 0.7rem;
    font-weight: 500;
    text-transform: uppercase;
  }

  .creator-type.artist {
    background: #fef3c7;
    color: #92400e;
  }

  .creator-type.audience {
    background: #e0e7ff;
    color: #3730a3;
  }

  .creator-type.admin {
    background: #dcfce7;
    color: #166534;
  }

  .creator-email {
    color: #64748b;
    font-size: 0.85rem;
  }

  .event-details {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }

  .event-details > div {
    font-size: 0.9rem;
    color: #64748b;
  }

  .event-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .tag {
    padding: 0.25rem 0.75rem;
    background: #f1f5f9;
    border-radius: 16px;
    font-size: 0.8rem;
    color: #475569;
  }

  .tag-more {
    padding: 0.25rem 0.75rem;
    background: #e2e8f0;
    border-radius: 16px;
    font-size: 0.8rem;
    color: #64748b;
    font-style: italic;
  }

  .event-actions {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .status-badge {
    padding: 0.25rem 0.75rem;
    border-radius: 6px;
    font-size: 0.8rem;
    font-weight: 500;
    text-transform: capitalize;
  }

  .status-badge.published {
    background: #dcfce7;
    color: #166534;
  }

  .status-badge.draft {
    background: #fef3c7;
    color: #92400e;
  }

  .status-badge.pending {
    background: #e0e7ff;
    color: #3730a3;
  }

  .status-badge.cancelled {
    background: #fee2e2;
    color: #dc2626;
  }

  /* Buttons */
  .btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    text-decoration: none;
    font-weight: 600;
    font-size: 0.9rem;
    border: none;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .btn-sm {
    padding: 0.5rem 0.75rem;
    font-size: 0.8rem;
  }

  .btn-primary {
    background: #667eea;
    color: white;
  }

  .btn-primary:hover {
    background: #5a67d8;
  }

  .btn-secondary {
    background: #e2e8f0;
    color: #475569;
  }

  .btn-secondary:hover {
    background: #cbd5e1;
  }

  .btn-danger {
    background: #ef4444;
    color: white;
  }

  .btn-danger:hover {
    background: #dc2626;
  }

  .btn-success {
    background: #10b981;
    color: white;
  }

  .btn-success:hover {
    background: #059669;
  }

  .btn-info {
    background: #3b82f6;
    color: white;
  }

  .btn-info:hover {
    background: #2563eb;
  }

  .btn-warning {
    background: #f59e0b;
    color: white;
  }

  .btn-warning:hover {
    background: #d97706;
  }

  /* Modal */
  .modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
  }

  .modal-content {
    background: white;
    margin: 5% auto;
    border-radius: 12px;
    width: 90%;
    max-width: 600px;
    max-height: 80vh;
    overflow-y: auto;
  }

  .modal-large {
    max-width: 800px;
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem;
    border-bottom: 1px solid #e2e8f0;
  }

  .modal-header h3 {
    margin: 0;
    color: #1e293b;
  }

  .modal-close {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: #64748b;
  }

  .modal-body {
    padding: 1.5rem;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .admin-header-content {
      flex-direction: column;
      gap: 1rem;
    }

    .admin-nav-content {
      flex-wrap: wrap;
      gap: 1rem;
    }

    .admin-main {
      padding: 1rem;
    }

    .controls-bar {
      flex-direction: column;
      align-items: stretch;
    }

    .search-box {
      min-width: auto;
    }

    .filter-controls {
      flex-wrap: wrap;
    }

    .events-grid {
      grid-template-columns: 1fr;
    }

    .header-actions {
      flex-direction: column;
    }
  }
</style>

<script>
  // Search and filter functionality
  const searchInput = document.getElementById('eventSearch');
  const statusFilter = document.getElementById('statusFilter');
  const creatorTypeFilter = document.getElementById('creatorTypeFilter');
  const sortBy = document.getElementById('sortBy');
  const eventsGrid = document.getElementById('eventsGrid');
  const modal = document.getElementById('eventModal');
  const modalTitle = document.getElementById('modalTitle');
  const modalBody = document.getElementById('modalBody');

  let allEvents = Array.from(document.querySelectorAll('.event-card'));

  function filterAndSortEvents() {
    const searchTerm = searchInput.value.toLowerCase();
    const status = statusFilter.value;
    const creatorType = creatorTypeFilter.value;
    const sort = sortBy.value;

    let filteredEvents = allEvents.filter(card => {
      const title = card.querySelector('.event-title').textContent.toLowerCase();
      const creator = card.querySelector('.creator-info strong').textContent.toLowerCase();
      const cardStatus = card.dataset.status;
      const cardCreatorType = card.dataset.creatorType;

      const matchesSearch = title.includes(searchTerm) || creator.includes(searchTerm);
      const matchesStatus = !status || cardStatus === status;
      const matchesCreatorType = !creatorType || cardCreatorType === creatorType;

      return matchesSearch && matchesStatus && matchesCreatorType;
    });

    // Sort events
    filteredEvents.sort((a, b) => {
      switch (sort) {
        case 'title_asc':
          return a.querySelector('.event-title').textContent.localeCompare(b.querySelector('.event-title').textContent);
        case 'date_asc':
          const aDate = a.querySelector('.event-date').textContent;
          const bDate = b.querySelector('.event-date').textContent;
          return new Date(aDate.replace('📅 ', '')) - new Date(bDate.replace('📅 ', ''));
        case 'created_asc':
          return 1; // Would need timestamp data for proper sorting
        default: // created_desc
          return -1;
      }
    });

    // Hide all cards
    allEvents.forEach(card => card.style.display = 'none');
    
    // Show filtered cards
    filteredEvents.forEach(card => card.style.display = '');
  }

  // Event listeners for filtering
  [searchInput, statusFilter, creatorTypeFilter, sortBy].forEach(element => {
    element.addEventListener('input', filterAndSortEvents);
    element.addEventListener('change', filterAndSortEvents);
  });

  // Modal functionality
  function openModal(title, content) {
    modalTitle.textContent = title;
    modalBody.innerHTML = content;
    modal.style.display = 'block';
  }

  function closeModal() {
    modal.style.display = 'none';
  }

  document.getElementById('closeModal').addEventListener('click', closeModal);
  
  window.addEventListener('click', (e) => {
    if (e.target === modal) {
      closeModal();
    }
  });

  // Event action handlers
  document.addEventListener('click', async (e) => {
    const eventId = e.target.dataset.eventId;
    
    if (e.target.classList.contains('view-event')) {
      openModal('Event Details', '<div class="loading">Loading event details...</div>');
      
      try {
        const response = await fetch(`/api/admin/events/${eventId}`);
        const eventData = await response.json();
        
        modalBody.innerHTML = `
          <div class="event-detail-view">
            <div class="detail-section">
              <h4>Basic Information</h4>
              <p><strong>Title:</strong> ${eventData.title}</p>
              <p><strong>Description:</strong> ${eventData.description || 'No description'}</p>
              <p><strong>Status:</strong> ${eventData.status}</p>
              <p><strong>Creator:</strong> ${eventData.creator_name} (${eventData.creator_email})</p>
            </div>
            <div class="detail-section">
              <h4>Event Details</h4>
              <p><strong>Date:</strong> ${eventData.start_date || 'TBD'}</p>
              <p><strong>Time:</strong> ${eventData.start_time || 'TBD'}</p>
              <p><strong>Venue:</strong> ${eventData.venue_name || 'TBD'}</p>
              <p><strong>Location:</strong> ${eventData.city && eventData.state ? `${eventData.city}, ${eventData.state}` : 'TBD'}</p>
              <p><strong>Price:</strong> ${eventData.ticket_price !== null ? (eventData.ticket_price === 0 ? 'Free' : `$${eventData.ticket_price}`) : 'TBD'}</p>
            </div>
            ${eventData.tags && eventData.tags.length > 0 ? `
              <div class="detail-section">
                <h4>Tags</h4>
                <div class="event-tags">
                  ${eventData.tags.map(tag => `<span class="tag">${tag}</span>`).join('')}
                </div>
              </div>
            ` : ''}
          </div>
        `;
      } catch (error) {
        modalBody.innerHTML = '<div class="error">Failed to load event details.</div>';
      }
    }
    
    if (e.target.classList.contains('approve-event')) {
      try {
        const response = await fetch(`/api/admin/events/${eventId}/approve`, { method: 'POST' });
        if (response.ok) {
          location.reload();
        }
      } catch (error) {
        alert('Failed to approve event');
      }
    }
    
    if (e.target.classList.contains('unpublish-event')) {
      try {
        const response = await fetch(`/api/admin/events/${eventId}/unpublish`, { method: 'POST' });
        if (response.ok) {
          location.reload();
        }
      } catch (error) {
        alert('Failed to unpublish event');
      }
    }
    
    if (e.target.classList.contains('delete-event')) {
      if (confirm('Are you sure you want to delete this event? This action cannot be undone.')) {
        try {
          const response = await fetch(`/api/admin/events/${eventId}`, { method: 'DELETE' });
          if (response.ok) {
            location.reload();
          }
        } catch (error) {
          alert('Failed to delete event');
        }
      }
    }
  });

  // Bulk actions
  document.getElementById('bulkApproveBtn').addEventListener('click', async () => {
    const selectedEvents = Array.from(document.querySelectorAll('.event-select:checked')).map(cb => cb.value);
    if (selectedEvents.length === 0) {
      alert('Please select at least one event');
      return;
    }
    
    if (confirm(`Are you sure you want to approve ${selectedEvents.length} event(s)?`)) {
      try {
        const response = await fetch('/api/admin/events/bulk-approve', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ eventIds: selectedEvents })
        });
        if (response.ok) {
          location.reload();
        }
      } catch (error) {
        alert('Failed to approve events');
      }
    }
  });

  document.getElementById('bulkDeleteBtn').addEventListener('click', async () => {
    const selectedEvents = Array.from(document.querySelectorAll('.event-select:checked')).map(cb => cb.value);
    if (selectedEvents.length === 0) {
      alert('Please select at least one event');
      return;
    }
    
    if (confirm(`Are you sure you want to delete ${selectedEvents.length} event(s)? This action cannot be undone.`)) {
      try {
        const response = await fetch('/api/admin/events/bulk-delete', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ eventIds: selectedEvents })
        });
        if (response.ok) {
          location.reload();
        }
      } catch (error) {
        alert('Failed to delete events');
      }
    }
  });

  // Logout functionality
  document.getElementById('logoutBtn')?.addEventListener('click', async () => {
    try {
      const response = await fetch('/api/auth/logout', { method: 'POST' });
      if (response.ok) {
        window.location.href = '/';
      }
    } catch (error) {
      console.error('Logout failed:', error);
    }
  });

  // Make closeModal globally available
  window.closeModal = closeModal;
</script>

<style>
  .event-detail-view .detail-section {
    margin-bottom: 2rem;
  }

  .event-detail-view .detail-section h4 {
    color: #1e293b;
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid #e2e8f0;
  }

  .event-detail-view .detail-section p {
    margin: 0.75rem 0;
  }

  .loading, .error {
    text-align: center;
    padding: 2rem;
    color: #64748b;
  }

  .error {
    color: #dc2626;
  }
</style> 