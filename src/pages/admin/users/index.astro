---
import Layout from '../../../layouts/Layout.astro';
import { Pool } from 'pg';

// Helper function to parse cookies
function parseCookie(cookieString, name) {
  const cookies = cookieString.split(';').map(cookie => cookie.trim());
  for (const cookie of cookies) {
    const [cookieName, cookieValue] = cookie.split('=');
    if (cookieName === name) {
      return decodeURIComponent(cookieValue);
    }
  }
  return null;
}

// Admin check
const cookies = Astro.request.headers.get('cookie');
let currentUser = null;
let isAdmin = false;

if (cookies) {
  const sessionToken = parseCookie(cookies, 'session_token');
  if (sessionToken) {
    // 🔍 DEBUGGING AUTH DATABASE CONNECTION
    console.log('\n=== 🔑 ADMIN AUTH - DATABASE CONNECTION DEBUG ===');
    console.log('🌍 Auth Environment Variables:');
    console.log('  NEON_DATABASE_URL present:', !!process.env.NEON_DATABASE_URL);
    console.log('  DATABASE_URL present:', !!process.env.DATABASE_URL);
    
    const connectionString = process.env.NEON_DATABASE_URL || process.env.DATABASE_URL || 
      'postgresql://ishanpathak@localhost:5432/artist_events';
    
    console.log('📍 Auth Connection String (first 60 chars):', connectionString.substring(0, 60) + '...');
    console.log('🔗 Auth Connection Type:', connectionString.includes('neon.tech') ? 'NEON (Production)' : 'LOCAL (Development)');
    console.log('🎫 Session Token (first 10 chars):', sessionToken.substring(0, 10) + '...');
    console.log('===============================================\n');
    
    const pool = new Pool({
      connectionString,
      ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
    });

    try {
      const client = await pool.connect();
      const sessionResult = await client.query(
        'SELECT u.* FROM users u JOIN user_sessions s ON u.id = s.user_id WHERE s.session_token = $1 AND s.expires_at > NOW()',
        [sessionToken]
      );
      
      console.log('🔑 Session Query Results:');
      console.log('   Sessions Found:', sessionResult.rows.length);
      if (sessionResult.rows.length > 0) {
        console.log('   User Email:', sessionResult.rows[0].email);
        console.log('   User Type:', sessionResult.rows[0].user_type);
        currentUser = sessionResult.rows[0];
        isAdmin = currentUser.email === 'ishan.pathak2711@gmail.com' || 
                 currentUser.user_type === 'admin' || 
                 currentUser.is_super_admin === true;
        console.log('   Is Admin:', isAdmin);
      } else {
        console.log('   No valid session found for this token');
      }
      client.release();
    } catch (error) {
      console.error('Admin auth error:', error);
    }
  }
}

if (!isAdmin) {
  return new Response(null, {
    status: 302,
    headers: { Location: '/?error=unauthorized' }
  });
}

// Get all users with pagination
async function getUsers() {
  // 🔍 DEBUGGING DATABASE CONNECTION
  console.log('\n=== 🔍 ADMIN USERS PAGE - DATABASE CONNECTION DEBUG ===');
  console.log('🌍 Environment Variables:');
  console.log('  NODE_ENV:', process.env.NODE_ENV);
  console.log('  NEON_DATABASE_URL present:', !!process.env.NEON_DATABASE_URL);
  console.log('  DATABASE_URL present:', !!process.env.DATABASE_URL);
  
  if (process.env.NEON_DATABASE_URL) {
    console.log('  NEON_DATABASE_URL (first 50 chars):', process.env.NEON_DATABASE_URL.substring(0, 50) + '...');
  }
  if (process.env.DATABASE_URL) {
    console.log('  DATABASE_URL (first 50 chars):', process.env.DATABASE_URL.substring(0, 50) + '...');
  }
  
  const connectionString = process.env.NEON_DATABASE_URL || process.env.DATABASE_URL || 
    'postgresql://ishanpathak@localhost:5432/artist_events';
  
  console.log('📍 Selected Connection String (first 60 chars):', connectionString.substring(0, 60) + '...');
  console.log('🔗 Connection Type:', connectionString.includes('neon.tech') ? 'NEON (Production)' : 'LOCAL (Development)');
  console.log('===============================================\n');
  
  const pool = new Pool({
    connectionString,
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
  });

  const client = await pool.connect();
  try {
    // Test query to verify database connection
    const testResult = await client.query('SELECT current_database(), current_user, version()');
    console.log('🗄️  Database Info:');
    console.log('   Database Name:', testResult.rows[0].current_database);
    console.log('   Connected User:', testResult.rows[0].current_user);
    console.log('   PostgreSQL Version:', testResult.rows[0].version.split(' ')[0] + ' ' + testResult.rows[0].version.split(' ')[1]);
    
    // Get users with their events count and latest activity
    const usersResult = await client.query(`
      SELECT 
        u.*,
        COUNT(DISTINCT e.id) as events_count,
        COUNT(DISTINCT bp.id) as blog_posts_count,
        MAX(COALESCE(e.created_at, bp.created_at, u.created_at)) as last_activity
      FROM users u
      LEFT JOIN events e ON u.id = e.created_by
      LEFT JOIN blog_posts bp ON u.id = bp.author_id
      GROUP BY u.id
      ORDER BY u.created_at DESC
    `);
    
    console.log('👥 Users Query Results:');
    console.log('   Total Users Found:', usersResult.rows.length);
    console.log('   First 3 User Emails:', usersResult.rows.slice(0, 3).map(u => u.email));
    console.log('   Admin Users:', usersResult.rows.filter(u => u.user_type === 'admin' || u.email.includes('admin')).map(u => u.email));

    return usersResult.rows;
  } finally {
    client.release();
  }
}

const users = await getUsers();
---

<Layout title="User Management - Admin Dashboard">
  <div class="admin-dashboard">
    <!-- Admin Header -->
    <header class="admin-header">
      <div class="admin-header-content">
        <div class="admin-brand">
          <h1>👥 User Management</h1>
          <p>Manage all platform users</p>
        </div>
        <div class="admin-actions">
          <a href="/admin" class="btn btn-secondary">← Back to Dashboard</a>
          <button id="logoutBtn" class="btn btn-danger">Logout</button>
        </div>
      </div>
    </header>

    <!-- Admin Navigation -->
    <nav class="admin-nav">
      <div class="admin-nav-content">
        <a href="/admin" class="admin-nav-link">📊 Overview</a>
        <a href="/admin/users" class="admin-nav-link active">👥 Users</a>
        <a href="/admin/events" class="admin-nav-link">🎪 Events</a>
        <a href="/admin/blogs" class="admin-nav-link">📝 Blogs</a>
        <a href="/admin/email-campaigns" class="admin-nav-link">📧 Email Campaigns</a>
        <a href="/admin/broadcast" class="admin-nav-link">📢 Broadcast</a>
        {currentUser?.email === 'ishan.pathak2711@gmail.com' && currentUser?.is_super_admin && (
          <a href="/admin/admins" class="admin-nav-link">⚙️ Admins</a>
        )}
      </div>
    </nav>

    <!-- Main Content -->
    <main class="admin-main">
      <!-- Controls -->
      <section class="controls-section">
        <div class="controls-header">
          <h2>All Users ({users.length})</h2>
          <button id="addUserBtn" class="btn btn-primary">+ Add New User</button>
        </div>
        
        <!-- Search and Filters -->
        <div class="controls-bar">
          <div class="search-box">
            <input type="text" id="userSearch" placeholder="Search users by name, email..." />
            <span class="search-icon">🔍</span>
          </div>
          
          <div class="filter-controls">
            <select id="userTypeFilter">
              <option value="">All User Types</option>
              <option value="artist">Artists</option>
              <option value="audience">Audience</option>
              <option value="admin">Admins</option>
            </select>
            
            <select id="statusFilter">
              <option value="">All Status</option>
              <option value="active">Active</option>
              <option value="banned">Banned</option>
            </select>
            
            <select id="sortBy">
              <option value="created_desc">Newest First</option>
              <option value="created_asc">Oldest First</option>
              <option value="name_asc">Name A-Z</option>
              <option value="activity_desc">Most Active</option>
            </select>
          </div>
        </div>
      </section>

      <!-- Users Table -->
      <section class="users-section">
        <div class="users-table-container">
          <table class="users-table">
            <thead>
              <tr>
                <th>User</th>
                <th>Type</th>
                <th>Activity</th>
                <th>Joined</th>
                <th>Last Active</th>
                <th>Status</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody id="usersTableBody">
              {users.map(user => (
                <tr class="user-row" data-user-id={user.id} data-user-type={user.user_type} data-status={user.banned_at ? 'banned' : 'active'}>
                  <td class="user-info">
                    <div class="user-avatar">
                      {(user.name && user.name.length > 0) ? user.name.charAt(0).toUpperCase() : user.email.charAt(0).toUpperCase()}
                    </div>
                    <div class="user-details">
                      <strong class="user-name">{user.name || 'No Name'}</strong>
                      <span class="user-email">{user.email}</span>
                    </div>
                  </td>
                  
                  <td>
                    <span class={`user-type-badge ${user.user_type}`}>
                      {user.user_type === 'artist' ? '🎨' : user.user_type === 'audience' ? '🎭' : '⚙️'} 
                      {user.user_type}
                    </span>
                  </td>
                  
                  <td class="activity-info">
                    <div class="activity-stats">
                      <span>{user.events_count} events</span>
                      <span>{user.blog_posts_count} posts</span>
                    </div>
                  </td>
                  
                  <td class="date-info">
                    {new Date(user.created_at).toLocaleDateString()}
                  </td>
                  
                  <td class="date-info">
                    {user.last_activity ? new Date(user.last_activity).toLocaleDateString() : 'Never'}
                  </td>
                  
                  <td>
                    <span class={`status-badge ${user.banned_at ? 'banned' : 'active'}`}>
                      {user.banned_at ? '🚫 Banned' : '✅ Active'}
                    </span>
                  </td>
                  
                  <td class="actions-cell">
                    <div class="action-buttons">
                      <button class="btn btn-sm btn-secondary edit-user" data-user-id={user.id}>
                        ✏️ Edit
                      </button>
                      {user.banned_at ? (
                        <button class="btn btn-sm btn-success unban-user" data-user-id={user.id}>
                          ✅ Unban
                        </button>
                      ) : (
                        <button class="btn btn-sm btn-danger ban-user" data-user-id={user.id}>
                          🚫 Ban
                        </button>
                      )}
                      <button class="btn btn-sm btn-info view-user" data-user-id={user.id}>
                        👁️ View
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </section>
    </main>
  </div>

  <!-- User Modal -->
  <div id="userModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h3 id="modalTitle">User Details</h3>
        <button class="modal-close" id="closeModal">×</button>
      </div>
      <div class="modal-body" id="modalBody">
        <!-- Dynamic content will be loaded here -->
      </div>
    </div>
  </div>
</Layout>

<style>
  .admin-dashboard {
    min-height: 100vh;
    background: #f8fafc;
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  }

  /* Admin Header */
  .admin-header {
    background: white;
    border-bottom: 1px solid #e2e8f0;
    padding: 1rem 0;
  }

  .admin-header-content {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 2rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .admin-brand h1 {
    font-size: 1.5rem;
    font-weight: 700;
    color: #1e293b;
    margin-bottom: 0.25rem;
  }

  .admin-brand p {
    color: #64748b;
    margin: 0;
  }

  .admin-actions {
    display: flex;
    gap: 1rem;
    align-items: center;
  }

  /* Admin Navigation */
  .admin-nav {
    background: white;
    border-bottom: 1px solid #e2e8f0;
    padding: 0;
  }

  .admin-nav-content {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 2rem;
    display: flex;
    gap: 2rem;
  }

  .admin-nav-link {
    display: flex;
    align-items: center;
    padding: 1rem 0;
    text-decoration: none;
    color: #64748b;
    font-weight: 500;
    border-bottom: 3px solid transparent;
    transition: all 0.3s ease;
  }

  .admin-nav-link:hover,
  .admin-nav-link.active {
    color: #667eea;
    border-bottom-color: #667eea;
  }

  /* Main Content */
  .admin-main {
    max-width: 1400px;
    margin: 0 auto;
    padding: 2rem;
  }

  /* Controls Section */
  .controls-section {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    margin-bottom: 2rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .controls-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
  }

  .controls-header h2 {
    font-size: 1.25rem;
    font-weight: 600;
    color: #1e293b;
  }

  .controls-bar {
    display: flex;
    gap: 1rem;
    align-items: center;
    flex-wrap: wrap;
  }

  .search-box {
    position: relative;
    flex: 1;
    min-width: 300px;
  }

  .search-box input {
    width: 100%;
    padding: 0.75rem 2.5rem 0.75rem 1rem;
    border: 2px solid #e2e8f0;
    border-radius: 8px;
    font-size: 0.9rem;
    transition: border-color 0.3s ease;
  }

  .search-box input:focus {
    outline: none;
    border-color: #667eea;
  }

  .search-icon {
    position: absolute;
    right: 1rem;
    top: 50%;
    transform: translateY(-50%);
    color: #64748b;
  }

  .filter-controls {
    display: flex;
    gap: 1rem;
  }

  .filter-controls select {
    padding: 0.75rem;
    border: 2px solid #e2e8f0;
    border-radius: 8px;
    background: white;
    font-size: 0.9rem;
    cursor: pointer;
  }

  /* Users Table */
  .users-section {
    background: white;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .users-table-container {
    overflow-x: auto;
  }

  .users-table {
    width: 100%;
    border-collapse: collapse;
  }

  .users-table th {
    background: #f8fafc;
    padding: 1rem;
    text-align: left;
    font-weight: 600;
    color: #374151;
    border-bottom: 1px solid #e2e8f0;
  }

  .users-table td {
    padding: 1rem;
    border-bottom: 1px solid #f1f5f9;
    vertical-align: middle;
  }

  .user-row:hover {
    background: #f8fafc;
  }

  .user-info {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .user-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: linear-gradient(135deg, #667eea, #764ba2);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: 600;
    font-size: 1.1rem;
  }

  .user-details {
    display: flex;
    flex-direction: column;
  }

  .user-name {
    color: #1e293b;
    font-weight: 600;
  }

  .user-email {
    color: #64748b;
    font-size: 0.85rem;
  }

  .user-type-badge {
    padding: 0.25rem 0.75rem;
    border-radius: 6px;
    font-size: 0.8rem;
    font-weight: 500;
    text-transform: capitalize;
  }

  .user-type-badge.artist {
    background: #fef3c7;
    color: #92400e;
  }

  .user-type-badge.audience {
    background: #e0e7ff;
    color: #3730a3;
  }

  .user-type-badge.admin {
    background: #dcfce7;
    color: #166534;
  }

  .activity-stats {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
    font-size: 0.85rem;
    color: #64748b;
  }

  .date-info {
    color: #64748b;
    font-size: 0.85rem;
  }

  .status-badge {
    padding: 0.25rem 0.75rem;
    border-radius: 6px;
    font-size: 0.8rem;
    font-weight: 500;
  }

  .status-badge.active {
    background: #dcfce7;
    color: #166534;
  }

  .status-badge.banned {
    background: #fee2e2;
    color: #dc2626;
  }

  .action-buttons {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  /* Buttons */
  .btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    text-decoration: none;
    font-weight: 600;
    font-size: 0.9rem;
    border: none;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .btn-sm {
    padding: 0.5rem 0.75rem;
    font-size: 0.8rem;
  }

  .btn-primary {
    background: #667eea;
    color: white;
  }

  .btn-primary:hover {
    background: #5a67d8;
  }

  .btn-secondary {
    background: #e2e8f0;
    color: #475569;
  }

  .btn-secondary:hover {
    background: #cbd5e1;
  }

  .btn-danger {
    background: #ef4444;
    color: white;
  }

  .btn-danger:hover {
    background: #dc2626;
  }

  .btn-success {
    background: #10b981;
    color: white;
  }

  .btn-success:hover {
    background: #059669;
  }

  .btn-info {
    background: #3b82f6;
    color: white;
  }

  .btn-info:hover {
    background: #2563eb;
  }

  /* Modal */
  .modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
  }

  .modal-content {
    background: white;
    margin: 5% auto;
    border-radius: 12px;
    width: 90%;
    max-width: 600px;
    max-height: 80vh;
    overflow-y: auto;
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem;
    border-bottom: 1px solid #e2e8f0;
  }

  .modal-header h3 {
    margin: 0;
    color: #1e293b;
  }

  .modal-close {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: #64748b;
  }

  .modal-body {
    padding: 1.5rem;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .admin-header-content {
      flex-direction: column;
      gap: 1rem;
    }

    .admin-nav-content {
      flex-wrap: wrap;
      gap: 1rem;
    }

    .admin-main {
      padding: 1rem;
    }

    .controls-bar {
      flex-direction: column;
      align-items: stretch;
    }

    .search-box {
      min-width: auto;
    }

    .filter-controls {
      flex-wrap: wrap;
    }

    .users-table {
      font-size: 0.8rem;
    }

    .action-buttons {
      flex-direction: column;
    }
  }
</style>

<script>
  // Search functionality
  const searchInput = document.getElementById('userSearch');
  const userTypeFilter = document.getElementById('userTypeFilter');
  const statusFilter = document.getElementById('statusFilter');
  const sortBy = document.getElementById('sortBy');
  const tableBody = document.getElementById('usersTableBody');
  const modal = document.getElementById('userModal');
  const modalTitle = document.getElementById('modalTitle');
  const modalBody = document.getElementById('modalBody');

  let allUsers = Array.from(document.querySelectorAll('.user-row'));

  function filterAndSortUsers() {
    const searchTerm = searchInput.value.toLowerCase();
    const userType = userTypeFilter.value;
    const status = statusFilter.value;
    const sort = sortBy.value;

    let filteredUsers = allUsers.filter(row => {
      const userName = row.querySelector('.user-name').textContent.toLowerCase();
      const userEmail = row.querySelector('.user-email').textContent.toLowerCase();
      const rowUserType = row.dataset.userType;
      const rowStatus = row.dataset.status;

      const matchesSearch = userName.includes(searchTerm) || userEmail.includes(searchTerm);
      const matchesType = !userType || rowUserType === userType;
      const matchesStatus = !status || rowStatus === status;

      return matchesSearch && matchesType && matchesStatus;
    });

    // Sort users
    filteredUsers.sort((a, b) => {
      switch (sort) {
        case 'name_asc':
          return a.querySelector('.user-name').textContent.localeCompare(b.querySelector('.user-name').textContent);
        case 'activity_desc':
          const aEvents = parseInt(a.querySelector('.activity-stats').children[0].textContent);
          const bEvents = parseInt(b.querySelector('.activity-stats').children[0].textContent);
          return bEvents - aEvents;
        case 'created_asc':
          return new Date(a.querySelector('.date-info').textContent) - new Date(b.querySelector('.date-info').textContent);
        default: // created_desc
          return new Date(b.querySelector('.date-info').textContent) - new Date(a.querySelector('.date-info').textContent);
      }
    });

    // Hide all rows
    allUsers.forEach(row => row.style.display = 'none');
    
    // Show filtered rows
    filteredUsers.forEach(row => row.style.display = '');
  }

  // Event listeners for filtering
  [searchInput, userTypeFilter, statusFilter, sortBy].forEach(element => {
    element.addEventListener('input', filterAndSortUsers);
    element.addEventListener('change', filterAndSortUsers);
  });

  // Modal functionality
  function openModal(title, content) {
    modalTitle.textContent = title;
    modalBody.innerHTML = content;
    modal.style.display = 'block';
  }

  function closeModal() {
    modal.style.display = 'none';
  }

  document.getElementById('closeModal').addEventListener('click', closeModal);
  
  window.addEventListener('click', (e) => {
    if (e.target === modal) {
      closeModal();
    }
  });

  // User action handlers
  document.addEventListener('click', async (e) => {
    const userId = e.target.dataset.userId;
    
    if (e.target.classList.contains('view-user')) {
      // View user details
      openModal('User Details', `
        <div class="loading">Loading user details...</div>
      `);
      
      try {
        const response = await fetch(`/api/admin/users/${userId}`);
        const userData = await response.json();
        
        modalBody.innerHTML = `
          <div class="user-detail-grid">
            <div class="detail-section">
              <h4>Basic Information</h4>
              <p><strong>Name:</strong> ${userData.name}</p>
              <p><strong>Email:</strong> ${userData.email}</p>
              <p><strong>User Type:</strong> ${userData.user_type}</p>
              <p><strong>Joined:</strong> ${new Date(userData.created_at).toLocaleDateString()}</p>
              <p><strong>Status:</strong> ${userData.banned_at ? 'Banned' : 'Active'}</p>
            </div>
            <div class="detail-section">
              <h4>Activity Summary</h4>
              <p><strong>Events Created:</strong> ${userData.events_count || 0}</p>
              <p><strong>Blog Posts:</strong> ${userData.blog_posts_count || 0}</p>
              <p><strong>Last Activity:</strong> ${userData.last_activity ? new Date(userData.last_activity).toLocaleDateString() : 'Never'}</p>
            </div>
          </div>
        `;
      } catch (error) {
        modalBody.innerHTML = '<div class="error">Failed to load user details.</div>';
      }
    }
    
    if (e.target.classList.contains('edit-user')) {
      // Edit user
      openModal('Edit User', `
        <form id="editUserForm" data-user-id="${userId}">
          <div class="form-group">
            <label>Name</label>
            <input type="text" name="name" required />
          </div>
          <div class="form-group">
            <label>Email</label>
            <input type="email" name="email" required />
          </div>
          <div class="form-group">
            <label>User Type</label>
            <select name="user_type" required>
              <option value="audience">Audience</option>
              <option value="artist">Artist</option>
              <option value="admin">Admin</option>
            </select>
          </div>
          <div class="form-actions">
            <button type="submit" class="btn btn-primary">Save Changes</button>
            <button type="button" onclick="closeModal()" class="btn btn-secondary">Cancel</button>
          </div>
        </form>
      `);
      
      // Load current user data
      const userRow = e.target.closest('.user-row');
      const form = document.getElementById('editUserForm');
      form.name.value = userRow.querySelector('.user-name').textContent;
      form.email.value = userRow.querySelector('.user-email').textContent;
      form.user_type.value = userRow.dataset.userType;
    }
    
    if (e.target.classList.contains('ban-user')) {
      if (confirm('Are you sure you want to ban this user?')) {
        try {
          const response = await fetch(`/api/admin/users/${userId}/ban`, { method: 'POST' });
          if (response.ok) {
            location.reload();
          }
        } catch (error) {
          alert('Failed to ban user');
        }
      }
    }
    
    if (e.target.classList.contains('unban-user')) {
      try {
        const response = await fetch(`/api/admin/users/${userId}/unban`, { method: 'POST' });
        if (response.ok) {
          location.reload();
        }
      } catch (error) {
        alert('Failed to unban user');
      }
    }
  });

  // Form submission handler
  document.addEventListener('submit', async (e) => {
    if (e.target.id === 'editUserForm') {
      e.preventDefault();
      const formData = new FormData(e.target);
      const userId = e.target.dataset.userId;
      
      try {
        const response = await fetch(`/api/admin/users/${userId}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(Object.fromEntries(formData))
        });
        
        if (response.ok) {
          closeModal();
          location.reload();
        }
      } catch (error) {
        alert('Failed to update user');
      }
    }
  });

  // Logout functionality
  document.getElementById('logoutBtn')?.addEventListener('click', async () => {
    try {
      const response = await fetch('/api/auth/logout', { method: 'POST' });
      if (response.ok) {
        window.location.href = '/';
      }
    } catch (error) {
      console.error('Logout failed:', error);
    }
  });

  // Make closeModal globally available
  window.closeModal = closeModal;
</script>

<style>
  .detail-section {
    margin-bottom: 1.5rem;
  }

  .detail-section h4 {
    color: #1e293b;
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid #e2e8f0;
  }

  .detail-section p {
    margin: 0.5rem 0;
  }

  .form-group {
    margin-bottom: 1rem;
  }

  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 600;
    color: #374151;
  }

  .form-group input,
  .form-group select {
    width: 100%;
    padding: 0.75rem;
    border: 2px solid #e2e8f0;
    border-radius: 8px;
    font-size: 0.9rem;
  }

  .form-group input:focus,
  .form-group select:focus {
    outline: none;
    border-color: #667eea;
  }

  .form-actions {
    display: flex;
    gap: 1rem;
    justify-content: flex-end;
    margin-top: 1.5rem;
  }

  .loading, .error {
    text-align: center;
    padding: 2rem;
    color: #64748b;
  }

  .error {
    color: #dc2626;
  }
</style> 