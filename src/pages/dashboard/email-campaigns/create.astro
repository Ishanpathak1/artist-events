---
import { authenticateUser } from '../../../../lib/auth-middleware.js';
import Layout from '../../../layouts/Layout.astro';
import { Pool } from 'pg';

// Check authentication
const authResult = await authenticateUser(Astro.request);
if (!authResult.user) {
  return Astro.redirect('/auth/login');
}

const user = authResult.user;
const pool = new Pool({
  connectionString: process.env.NEON_DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

// Get fan count
async function getFanCount(userId) {
  const client = await pool.connect();
  try {
    const result = await client.query(`
      SELECT COUNT(*) as count 
      FROM artist_subscriptions 
      WHERE artist_id = $1 AND is_subscribed = true
    `, [userId]);
    return result.rows[0].count;
  } finally {
    client.release();
  }
}

// Get total user count
async function getTotalUserCount() {
  const client = await pool.connect();
  try {
    const result = await client.query('SELECT COUNT(*) as count FROM users');
    return result.rows[0].count;
  } finally {
    client.release();
  }
}

let fanCount = 0;
let totalUsers = 0;

try {
  fanCount = parseInt(await getFanCount(user.id)) || 0;
  totalUsers = parseInt(await getTotalUserCount()) || 0;
} catch (error) {
  fanCount = 0;
  totalUsers = 0;
}

const templates = [
  {
    id: 'new_release',
    name: 'üéµ New Release Announcement',
    subject: 'New Music Alert: [Song/Album Name] is Here!',
    content: 'Hey there!\n\nI\'m thrilled to share my latest creation with you! üé∂\n\n[Song/Album Name] is now available on all streaming platforms.\n\nRock on,\n[Your Name]'
  },
  {
    id: 'upcoming_show',
    name: 'üé™ Upcoming Show',
    subject: 'See You Live: [Venue] on [Date]!',
    content: 'Hey music lovers!\n\nI can\'t wait to perform for you live! üé§\n\nüìÖ Date: [Date]\nüìç Venue: [Venue Name]\nüé´ Tickets: [Ticket Link]\n\nCan\'t wait to see you there!\n\n[Your Name]'
  }
];
---

<Layout title="Create Email Campaign">
  <div class="container">
    <header class="header">
      <h1>‚úçÔ∏è Create Email Campaign</h1>
      <a href="/dashboard/email-campaigns" class="btn-back">‚Üê Back</a>
    </header>

    <div class="content">
      <section class="templates">
        <h2>üé® Templates</h2>
        {templates.map(template => (
          <div class="template-card" data-template-id={template.id}>
            <h3>{template.name}</h3>
            <p>{template.subject}</p>
          </div>
        ))}
      </section>

      <section class="form-section">
        <form id="campaignForm">
          <div class="form-group">
            <label>Campaign Type</label>
            <select name="campaign_type" required>
              <option value="">Select type...</option>
              <option value="announcement">üì¢ Announcement</option>
              <option value="new_release">üéµ New Release</option>
              <option value="event_promotion">üé™ Event Promotion</option>
            </select>
          </div>

          <div class="form-group">
            <label>Audience</label>
            <select name="audience_type" required>
              <option value="">Select audience...</option>
              <option value="my_fans">üë• My Fans ({fanCount})</option>
              <option value="everyone">üåç Everyone ({totalUsers}) - Requires Approval</option>
            </select>
          </div>

          <div class="form-group">
            <label>Recipients</label>
            <div class="recipients-display">
              <span id="recipientCount">0</span> people will receive this email
            </div>
          </div>

          <div class="form-group">
            <label>Subject Line</label>
            <input type="text" name="subject" id="subject" required placeholder="Enter subject...">
          </div>

          <div class="form-group">
            <label>Content</label>
            <textarea name="content" id="content" rows="10" required placeholder="Write your message..."></textarea>
          </div>

          <div class="form-group">
            <label>Preview</label>
            <div class="preview">
              <div class="preview-header">
                <div class="preview-subject" id="previewSubject">Subject: Your subject here</div>
              </div>
              <div class="preview-content" id="previewContent">Your content will appear here...</div>
            </div>
          </div>

          <div class="form-actions">
            <button type="button" id="saveDraftBtn" class="btn-secondary">üíæ Save Draft</button>
            <button type="submit" class="btn-primary">üì§ Submit for Review</button>
          </div>
        </form>
      </section>
    </div>
  </div>

  <script type="application/json" id="templatesData">{JSON.stringify(templates)}</script>
  <script type="application/json" id="campaignData">{JSON.stringify({ fanCount: fanCount, totalUsers: totalUsers })}</script>
</Layout>

<style>
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
    background: #f8fafc;
    min-height: 100vh;
  }

  .header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    background: white;
    padding: 2rem;
    border-radius: 12px;
    border: 1px solid #e2e8f0;
  }

  .header h1 {
    font-size: 2rem;
    color: #1e293b;
    margin: 0;
  }

  .btn-back {
    padding: 0.75rem 1.5rem;
    background: #f1f5f9;
    color: #475569;
    text-decoration: none;
    border-radius: 8px;
    font-weight: 500;
  }

  .content {
    display: grid;
    grid-template-columns: 1fr 2fr;
    gap: 2rem;
  }

  .templates {
    background: white;
    padding: 2rem;
    border-radius: 12px;
    border: 1px solid #e2e8f0;
    height: fit-content;
  }

  .templates h2 {
    margin-bottom: 1.5rem;
    color: #1e293b;
  }

  .template-card {
    border: 1px solid #e2e8f0;
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 1rem;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .template-card:hover {
    border-color: #667eea;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .template-card h3 {
    margin-bottom: 0.5rem;
    color: #1e293b;
  }

  .template-card p {
    color: #64748b;
    font-size: 0.9rem;
    margin: 0;
  }

  .form-section {
    background: white;
    padding: 2rem;
    border-radius: 12px;
    border: 1px solid #e2e8f0;
  }

  .form-group {
    margin-bottom: 1.5rem;
  }

  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 600;
    color: #374151;
  }

  .form-group input,
  .form-group select,
  .form-group textarea {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #d1d5db;
    border-radius: 8px;
    font-size: 1rem;
  }

  .form-group input:focus,
  .form-group select:focus,
  .form-group textarea:focus {
    outline: none;
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
  }

  .recipients-display {
    padding: 1rem;
    background: #f0f9ff;
    border: 1px solid #bae6fd;
    border-radius: 8px;
    color: #0369a1;
    font-weight: 600;
  }

  .preview {
    border: 1px solid #d1d5db;
    border-radius: 8px;
    overflow: hidden;
  }

  .preview-header {
    background: #f9fafb;
    padding: 1rem;
    border-bottom: 1px solid #e5e7eb;
  }

  .preview-subject {
    font-weight: 600;
    color: #1f2937;
  }

  .preview-content {
    padding: 1.5rem;
    background: white;
    min-height: 120px;
    white-space: pre-wrap;
    line-height: 1.6;
    color: #374151;
  }

  .form-actions {
    display: flex;
    gap: 1rem;
    padding-top: 1rem;
    border-top: 1px solid #e5e7eb;
  }

  .btn-primary,
  .btn-secondary {
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    font-weight: 500;
    border: none;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .btn-primary {
    background: #667eea;
    color: white;
  }

  .btn-primary:hover {
    background: #5a67d8;
  }

  .btn-secondary {
    background: #f1f5f9;
    color: #475569;
  }

  .btn-secondary:hover {
    background: #e2e8f0;
  }

  @media (max-width: 1024px) {
    .content {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  // Global variables
  let templates = [];
  let campaignData = {};
  
  // Wait for DOM to be fully loaded
  document.addEventListener('DOMContentLoaded', function() {
    // Parse templates and campaign data
    try {
      templates = JSON.parse(document.getElementById('templatesData').textContent);
    } catch (error) {
      templates = [];
    }
    
    try {
      const campaignDataElement = document.getElementById('campaignData');
      const campaignDataText = campaignDataElement?.textContent;
      
      if (campaignDataText) {
        campaignData = JSON.parse(campaignDataText);
      } else {
        campaignData = { fanCount: 0, totalUsers: 0 };
      }
    } catch (error) {
      campaignData = { fanCount: 0, totalUsers: 0 };
    }
    
    // Set up event listeners for form elements
    const subjectInput = document.getElementById('subject');
    const contentTextarea = document.getElementById('content');
    const audienceSelect = document.querySelector('[name="audience_type"]');
    const saveDraftBtn = document.getElementById('saveDraftBtn');
    
    // Add input event listeners for live preview
    if (subjectInput) {
      subjectInput.addEventListener('input', updatePreview);
    }
    
    if (contentTextarea) {
      contentTextarea.addEventListener('input', updatePreview);
    }
    
    if (audienceSelect) {
      audienceSelect.addEventListener('change', updateRecipients);
    }
    
    if (saveDraftBtn) {
      saveDraftBtn.addEventListener('click', saveDraft);
    }
    
    // Set up template card clicks
    const templateCards = document.querySelectorAll('.template-card');
    templateCards.forEach(card => {
      card.addEventListener('click', function() {
        const templateId = this.getAttribute('data-template-id');
        if (templateId) {
          useTemplate(templateId);
        }
      });
    });
    
    // Initialize displays
    updateRecipients();
    updatePreview();
    
    // Set up form submission
    const campaignForm = document.getElementById('campaignForm');
    if (campaignForm) {
      campaignForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const formData = new FormData(e.target);
        const data = Object.fromEntries(formData);
        
        try {
          const createResponse = await fetch('/api/artist/create-campaign', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ ...data, status: 'draft' })
          });
          
          const createResult = await createResponse.json();
          
          if (!createResult.success) {
            alert('Error creating campaign: ' + createResult.error);
            return;
          }
          
          const submitResponse = await fetch('/api/artist/submit-campaign', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ campaign_id: createResult.campaign_id })
          });
          
          const submitResult = await submitResponse.json();
          
          if (submitResult.success) {
            alert('Campaign created and submitted for review!');
            window.location.href = '/dashboard/email-campaigns';
          } else {
            alert('Campaign created but failed to submit: ' + submitResult.error);
          }
          
        } catch (error) {
          alert('Failed to create campaign: ' + error.message);
        }
      });
    }
  });

  // Update recipient count
  function updateRecipients() {
    const audienceType = document.querySelector('[name="audience_type"]')?.value;
    const countElement = document.getElementById('recipientCount');
    
    if (!countElement) {
      return;
    }
    
    if (audienceType === 'my_fans') {
      countElement.textContent = campaignData.fanCount || 0;
    } else if (audienceType === 'everyone') {
      countElement.textContent = campaignData.totalUsers || 0;
    } else {
      countElement.textContent = '0';
    }
  }

  // Use template
  function useTemplate(templateId) {
    const template = templates.find(t => t.id === templateId);
    if (template) {
      const subjectEl = document.getElementById('subject');
      const contentEl = document.getElementById('content');
      if (subjectEl && contentEl) {
        subjectEl.value = template.subject;
        contentEl.value = template.content;
        updatePreview();
      }
    }
  }

  // Update preview - simplified version
  function updatePreview() {
    const subjectElement = document.getElementById('subject');
    const contentElement = document.getElementById('content');
    const previewSubjectElement = document.getElementById('previewSubject');
    const previewContentElement = document.getElementById('previewContent');
    
    if (!subjectElement || !contentElement || !previewSubjectElement || !previewContentElement) {
      return;
    }
    
    const subject = subjectElement.value || 'Your subject here';
    const content = contentElement.value || 'Your content will appear here...';
    
    // Update subject
    previewSubjectElement.textContent = 'Subject: ' + subject;
    
    // Update content - keep it simple for now
    previewContentElement.textContent = content;
  }

  // Save draft
  async function saveDraft() {
    const formData = new FormData(document.getElementById('campaignForm'));
    const data = Object.fromEntries(formData);
    
    if (!data.subject || !data.content || !data.campaign_type || !data.audience_type) {
      alert('Please fill in all required fields');
      return;
    }
    
    try {
      const response = await fetch('/api/artist/create-campaign', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ ...data, status: 'draft' })
      });
      
      const result = await response.json();
      
      if (result.success) {
        alert('Campaign saved as draft!');
        window.location.href = '/dashboard/email-campaigns';
      } else {
        alert('Error: ' + result.error);
      }
    } catch (error) {
      alert('Failed to save campaign: ' + error.message);
    }
  }
</script> 