---
import { authenticateUser } from '../../../lib/auth-middleware.js';
import Layout from '../../layouts/Layout.astro';
import { Pool } from 'pg';

// Check authentication
const authResult = await authenticateUser(Astro.request);
if (!authResult.user) {
  return Astro.redirect('/auth/login');
}

const user = authResult.user;

// Database connection
const pool = new Pool({
  connectionString: process.env.NEON_DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

// Get user's campaigns
async function getUserCampaigns(userId) {
  const client = await pool.connect();
  try {
    const result = await client.query(`
      SELECT 
        id, subject, content, campaign_type, audience_type, 
        estimated_recipients, status, created_at, submitted_at, 
        reviewed_at, admin_notes, emails_sent,
        CASE 
          WHEN status = 'draft' THEN '📝 Draft'
          WHEN status = 'pending' THEN '⏳ Pending Review'
          WHEN status = 'approved' THEN '✅ Ready to Send'
          WHEN status = 'rejected' THEN '❌ Rejected'
          WHEN status = 'sent' THEN '📧 Sent'
          ELSE status
        END as status_display
      FROM artist_email_campaigns
      WHERE artist_id = $1
      ORDER BY created_at DESC
    `, [userId]);
    return result.rows;
  } finally {
    client.release();
  }
}

// Get fan count
async function getFanCount(userId) {
  const client = await pool.connect();
  try {
    const result = await client.query(`
      SELECT COUNT(*) as count 
      FROM artist_subscriptions 
      WHERE artist_id = $1 AND is_subscribed = true
    `, [userId]);
    return result.rows[0].count;
  } finally {
    client.release();
  }
}

// Get campaign stats
async function getCampaignStats(userId) {
  const client = await pool.connect();
  try {
    const result = await client.query(`
      SELECT 
        COUNT(*) as total_campaigns,
        COUNT(*) FILTER (WHERE status = 'sent') as sent_campaigns,
        COUNT(*) FILTER (WHERE status = 'pending') as pending_campaigns,
        COUNT(*) FILTER (WHERE status = 'draft') as draft_campaigns,
        COALESCE(SUM(emails_sent), 0) as total_emails_sent
      FROM artist_email_campaigns
      WHERE artist_id = $1
    `, [userId]);
    return result.rows[0];
  } finally {
    client.release();
  }
}

const campaigns = await getUserCampaigns(user.id);
const fanCount = await getFanCount(user.id);
const stats = await getCampaignStats(user.id);
---

<Layout title="Email Campaigns | Artist Dashboard">
  <div class="dashboard-container">
    <!-- Header -->
    <header class="dashboard-header">
      <div class="header-content">
        <div class="header-info">
          <h1>📧 Email Campaigns</h1>
          <p>Connect directly with your fans through email</p>
        </div>
        <div class="header-actions">
          <a href="/dashboard" class="btn btn-secondary">← Back to Dashboard</a>
          <a href="/dashboard/email-campaigns/create" class="btn btn-primary">✍️ Create Campaign</a>
        </div>
      </div>
    </header>

    <!-- Stats Cards -->
    <section class="stats-section">
      <div class="stats-grid">
        <div class="stat-card">
          <div class="stat-icon">👥</div>
          <div class="stat-content">
            <h3>{fanCount}</h3>
            <p>Total Fans</p>
          </div>
        </div>
        <div class="stat-card">
          <div class="stat-icon">📧</div>
          <div class="stat-content">
            <h3>{stats.total_campaigns}</h3>
            <p>Total Campaigns</p>
          </div>
        </div>
        <div class="stat-card">
          <div class="stat-icon">📤</div>
          <div class="stat-content">
            <h3>{stats.sent_campaigns}</h3>
            <p>Sent Campaigns</p>
          </div>
        </div>
        <div class="stat-card">
          <div class="stat-icon">📊</div>
          <div class="stat-content">
            <h3>{stats.total_emails_sent}</h3>
            <p>Emails Sent</p>
          </div>
        </div>
      </div>
    </section>

    <!-- Quick Actions -->
    <section class="quick-actions">
      <h2>Quick Actions</h2>
      <div class="action-grid">
        <a href="/dashboard/email-campaigns/create" class="action-card">
          <div class="action-icon">✍️</div>
          <h3>Create Campaign</h3>
          <p>Send updates to your fans</p>
        </a>
        <a href="/dashboard/email-campaigns/templates" class="action-card">
          <div class="action-icon">🎨</div>
          <h3>Templates</h3>
          <p>Use pre-made templates</p>
        </a>
        <a href="/dashboard/email-campaigns/analytics" class="action-card">
          <div class="action-icon">📊</div>
          <h3>Analytics</h3>
          <p>View campaign performance</p>
        </a>
      </div>
    </section>

    <!-- Campaigns List -->
    <section class="campaigns-section">
      <div class="section-header">
        <h2>Your Campaigns</h2>
        <div class="filter-tabs">
          <button class="tab-btn active" data-status="all">All ({campaigns.length})</button>
          <button class="tab-btn" data-status="draft">Drafts ({stats.draft_campaigns})</button>
          <button class="tab-btn" data-status="pending">Pending ({stats.pending_campaigns})</button>
          <button class="tab-btn" data-status="sent">Sent ({stats.sent_campaigns})</button>
        </div>
      </div>

      <div class="campaigns-list">
        {campaigns.length === 0 ? (
          <div class="empty-state">
            <div class="empty-icon">📧</div>
            <h3>No campaigns yet</h3>
            <p>Create your first email campaign to connect with your fans!</p>
            <a href="/dashboard/email-campaigns/create" class="btn btn-primary">Create Your First Campaign</a>
          </div>
        ) : (
          campaigns.map((campaign) => (
            <div class="campaign-card" data-status={campaign.status}>
              <div class="campaign-header">
                <div class="campaign-title">
                  <h3>{campaign.subject}</h3>
                  <div class="campaign-meta">
                    <span class="campaign-type">{campaign.campaign_type}</span>
                    <span class="campaign-audience">{campaign.audience_type}</span>
                  </div>
                </div>
                <div class="campaign-status">
                  <span class={`status-badge status-${campaign.status}`}>
                    {campaign.status_display}
                  </span>
                </div>
              </div>

              <div class="campaign-content">
                <p>{campaign.content.substring(0, 150)}{campaign.content.length > 150 ? '...' : ''}</p>
              </div>

              <div class="campaign-footer">
                <div class="campaign-dates">
                  <small>Created: {new Date(campaign.created_at).toLocaleDateString()}</small>
                </div>
                
                <div class="campaign-actions">
                  {campaign.status === 'draft' && (
                    <>
                      <button class="btn btn-secondary btn-sm" onclick={`editCampaign(${campaign.id})`}>
                        ✏️ Edit
                      </button>
                      <button class="btn btn-primary btn-sm" onclick={`submitCampaign(${campaign.id})`}>
                        📤 Submit for Review
                      </button>
                    </>
                  )}
                  {campaign.status === 'pending' && (
                    <span class="pending-info">⏳ Awaiting admin review</span>
                  )}
                  {campaign.status === 'approved' && (
                    <button class="btn btn-success btn-sm" onclick={`sendCampaign(${campaign.id})`}>
                      📧 Send Now
                    </button>
                  )}
                  {campaign.status === 'rejected' && (
                    <>
                      <div class="rejection-note">
                        <small><strong>Admin notes:</strong> {campaign.admin_notes}</small>
                      </div>
                      <button class="btn btn-primary btn-sm" onclick={`editCampaign(${campaign.id})`}>
                        ✏️ Edit & Resubmit
                      </button>
                    </>
                  )}
                  {campaign.status === 'sent' && (
                    <span class="sent-info">📧 Sent to {campaign.emails_sent} recipients</span>
                  )}
                </div>
              </div>
            </div>
          ))
        )}
      </div>
    </section>
  </div>

  <style>
    .dashboard-container {
      min-height: 100vh;
      background: #f8fafc;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    }

    /* Header */
    .dashboard-header {
      background: white;
      border-bottom: 1px solid #e2e8f0;
      padding: 2rem 0;
    }

    .header-content {
      max-width: 1400px;
      margin: 0 auto;
      padding: 0 2rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .header-info h1 {
      font-size: 2rem;
      font-weight: 700;
      color: #1e293b;
      margin-bottom: 0.5rem;
    }

    .header-info p {
      color: #64748b;
      margin: 0;
    }

    .header-actions {
      display: flex;
      gap: 1rem;
    }

    /* Stats Section */
    .stats-section {
      max-width: 1400px;
      margin: 0 auto;
      padding: 2rem;
    }

    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1.5rem;
    }

    .stat-card {
      background: white;
      border-radius: 12px;
      padding: 1.5rem;
      border: 1px solid #e2e8f0;
      display: flex;
      align-items: center;
      gap: 1rem;
      transition: all 0.3s ease;
    }

    .stat-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
    }

    .stat-icon {
      font-size: 2rem;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      width: 60px;
      height: 60px;
      border-radius: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .stat-content h3 {
      font-size: 2rem;
      font-weight: 700;
      color: #1e293b;
      margin: 0;
    }

    .stat-content p {
      color: #64748b;
      margin: 0;
      font-size: 0.9rem;
    }

    /* Quick Actions */
    .quick-actions {
      max-width: 1400px;
      margin: 0 auto;
      padding: 0 2rem 2rem;
    }

    .quick-actions h2 {
      font-size: 1.5rem;
      font-weight: 600;
      color: #1e293b;
      margin-bottom: 1.5rem;
    }

    .action-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1rem;
    }

    .action-card {
      background: white;
      border-radius: 12px;
      padding: 1.5rem;
      border: 1px solid #e2e8f0;
      text-decoration: none;
      color: inherit;
      transition: all 0.3s ease;
      text-align: center;
    }

    .action-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
      border-color: #667eea;
    }

    .action-icon {
      font-size: 2rem;
      margin-bottom: 1rem;
    }

    .action-card h3 {
      font-size: 1.1rem;
      font-weight: 600;
      color: #1e293b;
      margin-bottom: 0.5rem;
    }

    .action-card p {
      color: #64748b;
      margin: 0;
      font-size: 0.9rem;
    }

    /* Campaigns Section */
    .campaigns-section {
      max-width: 1400px;
      margin: 0 auto;
      padding: 0 2rem 3rem;
    }

    .section-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
    }

    .section-header h2 {
      font-size: 1.5rem;
      font-weight: 600;
      color: #1e293b;
      margin: 0;
    }

    .filter-tabs {
      display: flex;
      gap: 0.5rem;
    }

    .tab-btn {
      padding: 0.5rem 1rem;
      border: 1px solid #e2e8f0;
      background: white;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.3s ease;
      font-size: 0.9rem;
    }

    .tab-btn.active,
    .tab-btn:hover {
      background: #667eea;
      color: white;
      border-color: #667eea;
    }

    /* Campaign Cards */
    .campaigns-list {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .campaign-card {
      background: white;
      border-radius: 12px;
      border: 1px solid #e2e8f0;
      padding: 1.5rem;
      transition: all 0.3s ease;
    }

    .campaign-card:hover {
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .campaign-header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 1rem;
    }

    .campaign-title h3 {
      font-size: 1.2rem;
      font-weight: 600;
      color: #1e293b;
      margin-bottom: 0.5rem;
    }

    .campaign-meta {
      display: flex;
      gap: 0.5rem;
    }

    .campaign-type,
    .campaign-audience {
      background: #f1f5f9;
      color: #475569;
      padding: 0.25rem 0.5rem;
      border-radius: 6px;
      font-size: 0.8rem;
    }

    .status-badge {
      padding: 0.5rem 1rem;
      border-radius: 20px;
      font-size: 0.8rem;
      font-weight: 500;
    }

    .status-draft { background: #fef3c7; color: #92400e; }
    .status-pending { background: #dbeafe; color: #1e40af; }
    .status-approved { background: #d1fae5; color: #065f46; }
    .status-rejected { background: #fee2e2; color: #dc2626; }
    .status-sent { background: #e0e7ff; color: #3730a3; }

    .campaign-content {
      margin-bottom: 1rem;
    }

    .campaign-content p {
      color: #64748b;
      line-height: 1.6;
      margin: 0;
    }

    .campaign-footer {
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-top: 1px solid #f1f5f9;
      padding-top: 1rem;
    }

    .campaign-dates {
      display: flex;
      flex-direction: column;
      gap: 0.25rem;
    }

    .campaign-dates small {
      color: #64748b;
      font-size: 0.8rem;
    }

    .campaign-actions {
      display: flex;
      gap: 0.5rem;
      align-items: center;
    }

    .rejection-note {
      max-width: 300px;
      margin-bottom: 0.5rem;
    }

    .rejection-note small {
      color: #dc2626;
      font-size: 0.8rem;
    }

    .pending-info,
    .sent-info {
      color: #64748b;
      font-size: 0.9rem;
    }

    /* Empty State */
    .empty-state {
      text-align: center;
      padding: 3rem;
      background: white;
      border-radius: 12px;
      border: 1px solid #e2e8f0;
    }

    .empty-icon {
      font-size: 4rem;
      margin-bottom: 1rem;
    }

    .empty-state h3 {
      font-size: 1.5rem;
      font-weight: 600;
      color: #1e293b;
      margin-bottom: 1rem;
    }

    .empty-state p {
      color: #64748b;
      margin-bottom: 2rem;
    }

    /* Buttons */
    .btn {
      padding: 0.75rem 1.5rem;
      border-radius: 8px;
      text-decoration: none;
      font-weight: 500;
      transition: all 0.3s ease;
      border: none;
      cursor: pointer;
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
    }

    .btn-sm {
      padding: 0.5rem 1rem;
      font-size: 0.9rem;
    }

    .btn-primary {
      background: #667eea;
      color: white;
    }

    .btn-primary:hover {
      background: #5a67d8;
    }

    .btn-secondary {
      background: #f1f5f9;
      color: #475569;
    }

    .btn-secondary:hover {
      background: #e2e8f0;
    }

    .btn-success {
      background: #10b981;
      color: white;
    }

    .btn-success:hover {
      background: #059669;
    }

    /* Responsive */
    @media (max-width: 768px) {
      .header-content {
        flex-direction: column;
        gap: 1rem;
        text-align: center;
      }

      .section-header {
        flex-direction: column;
        gap: 1rem;
        align-items: stretch;
      }

      .campaign-footer {
        flex-direction: column;
        gap: 1rem;
        align-items: stretch;
      }

      .campaign-actions {
        justify-content: center;
      }
    }
  </style>

  <script>
    // Tab filtering
    document.querySelectorAll('.tab-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        document.querySelectorAll('.tab-btn').forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        
        const status = btn.dataset.status;
        const campaigns = document.querySelectorAll('.campaign-card');
        
        campaigns.forEach(campaign => {
          if (status === 'all' || campaign.dataset.status === status) {
            campaign.style.display = 'block';
          } else {
            campaign.style.display = 'none';
          }
        });
      });
    });

    // Campaign actions
    window.editCampaign = (id) => {
      window.location.href = `/dashboard/email-campaigns/edit/${id}`;
    };

    window.submitCampaign = async (id) => {
      if (!confirm('Submit this campaign for admin review?')) return;
      
      try {
        const response = await fetch('/api/artist/submit-campaign', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ campaign_id: id })
        });
        
        const result = await response.json();
        
        if (result.success) {
          alert('Campaign submitted for review!');
          location.reload();
        } else {
          alert('Error: ' + result.error);
        }
      } catch (error) {
        alert('Failed to submit campaign');
      }
    };

    window.sendCampaign = async (id) => {
      if (!confirm('Send this campaign now? This action cannot be undone.')) return;
      
      try {
        const response = await fetch('/api/artist/send-campaign', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ campaign_id: id })
        });
        
        const result = await response.json();
        
        if (result.success) {
          alert('Campaign sent successfully!');
          location.reload();
        } else {
          alert('Error: ' + result.error);
        }
      } catch (error) {
        alert('Failed to send campaign');
      }
    };
  </script>
</Layout> 