---
import Layout from '../../layouts/Layout.astro';

// Helper function to parse cookies
function parseCookie(cookieString, name) {
    const cookies = cookieString.split(';').map(cookie => cookie.trim());
    
    for (const cookie of cookies) {
        const [cookieName, cookieValue] = cookie.split('=');
        if (cookieName === name) {
            return decodeURIComponent(cookieValue);
        }
    }
    
    return null;
}

// Check if user has a session cookie
const cookies = Astro.request.headers.get('cookie');
if (!cookies) {
    return new Response(null, {
        status: 302,
        headers: { Location: '/auth/login?redirect=/dashboard/artist' }
    });
}

const sessionToken = parseCookie(cookies, 'session_token');
if (!sessionToken) {
    return new Response(null, {
        status: 302,
        headers: { Location: '/auth/login?redirect=/dashboard/artist' }
    });
}
---

<Layout title="Artist Dashboard - Artist Events">
    <div class="dashboard-container">
        <!-- Loading State -->
        <div id="loadingState" class="loading-container">
            <div class="loading-spinner-large"></div>
            <p>Loading your artist dashboard...</p>
        </div>

        <!-- Dashboard Content (will be shown after loading) -->
        <div id="dashboardContent" style="display: none;">
            <!-- Header -->
            <header class="dashboard-header">
                <div class="header-content">
                    <div class="user-info">
                        <div class="avatar">
                            <img id="userAvatar" src="/default-avatar.svg" alt="Artist Avatar" />
                        </div>
                        <div class="user-details">
                            <h1 id="welcomeMessage">Welcome back, Artist!</h1>
                            <p class="user-type" id="userType">Artist Account</p>
                            <div class="artist-badge">
                                <span class="badge">üé® Artist</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="header-actions">
                        <button id="profileBtn" class="btn btn-secondary">
                            Artist Profile
                        </button>
                        <button id="logoutBtn" class="btn btn-outline">
                            Logout
                        </button>
                    </div>
                </div>
            </header>

            <!-- Main Content -->
            <main class="dashboard-main">
                <!-- Artist Stats Cards -->
                <section class="stats-section">
                    <h2>Your Performance</h2>
                    <div class="stats-grid" id="statsGrid">
                        <div class="stat-card loading">
                            <div class="stat-icon">üé™</div>
                            <div class="stat-content">
                                <div class="stat-number" id="totalEvents">-</div>
                                <div class="stat-label">Events Created</div>
                            </div>
                        </div>
                        
                        <div class="stat-card loading">
                            <div class="stat-icon">‚ù§Ô∏è</div>
                            <div class="stat-content">
                                <div class="stat-number" id="eventLikes">-</div>
                                <div class="stat-label">Total Likes</div>
                            </div>
                        </div>
                        
                        <div class="stat-card loading">
                            <div class="stat-icon">üë•</div>
                            <div class="stat-content">
                                <div class="stat-number" id="followers">-</div>
                                <div class="stat-label">Followers</div>
                            </div>
                        </div>
                        
                        <div class="stat-card loading">
                            <div class="stat-icon">üìà</div>
                            <div class="stat-content">
                                <div class="stat-number" id="publishedEvents">-</div>
                                <div class="stat-label">Published Events</div>
                            </div>
                        </div>
                    </div>
                </section>

                <!-- Quick Actions -->
                <section class="actions-section">
                    <h2>Artist Tools</h2>
                    <div class="actions-grid" id="actionsGrid">
                        <a href="/submit" class="action-card primary">
                            <div class="action-icon">‚ûï</div>
                            <div class="action-content">
                                <h3>Create Event</h3>
                                <p>Submit a new event or performance</p>
                            </div>
                        </a>
                        
                        <a href="/events?creator=me" class="action-card">
                            <div class="action-icon">üìã</div>
                            <div class="action-content">
                                <h3>My Events</h3>
                                <p>Manage your created events</p>
                            </div>
                        </a>
                        
                        <button id="portfolioBtn" class="action-card">
                            <div class="action-icon">üé®</div>
                            <div class="action-content">
                                <h3>Portfolio</h3>
                                <p>Showcase your work and skills</p>
                            </div>
                        </button>
                        
                        <a href="/analytics" class="action-card">
                            <div class="action-icon">üìä</div>
                            <div class="action-content">
                                <h3>Analytics</h3>
                                <p>View detailed performance metrics</p>
                            </div>
                        </a>
                        
                        <button id="promotionBtn" class="action-card">
                            <div class="action-icon">üì¢</div>
                            <div class="action-content">
                                <h3>Promotion Tools</h3>
                                <p>Boost your event visibility</p>
                            </div>
                        </button>
                        
                        <button id="settingsBtn" class="action-card">
                            <div class="action-icon">‚öôÔ∏è</div>
                            <div class="action-content">
                                <h3>Artist Settings</h3>
                                <p>Configure your artist profile</p>
                            </div>
                        </button>
                    </div>
                </section>

                <!-- Recent Events & Activity -->
                <section class="content-section">
                    <div class="content-grid">
                        <!-- Recent Events -->
                        <div class="content-card">
                            <h3>Recent Events</h3>
                            <div id="recentEvents" class="content-list">
                                <div class="loading-item">Loading your events...</div>
                            </div>
                        </div>
                        
                        <!-- Recent Activity -->
                        <div class="content-card">
                            <h3>Activity Feed</h3>
                            <div id="activityFeed" class="content-list">
                                <div class="activity-item">
                                    <div class="activity-icon">üîÑ</div>
                                    <div class="activity-content">
                                        <p>Loading your recent activity...</p>
                                        <span class="activity-time">Just now</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </section>
            </main>
        </div>
    </div>

    <!-- Artist Profile Modal -->
    <div id="profileModal" class="modal" style="display: none;">
        <div class="modal-content large">
            <div class="modal-header">
                <h2>Artist Profile</h2>
                <button class="modal-close" id="closeProfileModal">&times;</button>
            </div>
            <div class="modal-body">
                <form id="profileForm">
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="name">Full Name</label>
                            <input type="text" id="profileName" name="name" required />
                        </div>
                        
                        <div class="form-group">
                            <label for="stageName">Stage Name</label>
                            <input type="text" id="profileStageName" name="stageName" placeholder="Your performance name" />
                        </div>
                        
                        <div class="form-group">
                            <label for="bio">Bio</label>
                            <textarea id="profileBio" name="bio" placeholder="Tell us about your artistic journey..."></textarea>
                        </div>
                        
                        <div class="form-group">
                            <label for="genres">Genres</label>
                            <input type="text" id="profileGenres" name="genres" placeholder="Rock, Jazz, Electronic..." />
                        </div>
                        
                        <div class="form-group">
                            <label for="location">Location</label>
                            <input type="text" id="profileLocation" name="location" placeholder="City, Country" />
                        </div>
                        
                        <div class="form-group">
                            <label for="website">Website</label>
                            <input type="url" id="profileWebsite" name="website" placeholder="https://yourwebsite.com" />
                        </div>
                        
                        <div class="form-group">
                            <label for="experienceLevel">Experience Level</label>
                            <select id="profileExperience" name="experienceLevel">
                                <option value="">Select experience</option>
                                <option value="beginner">Beginner</option>
                                <option value="intermediate">Intermediate</option>
                                <option value="professional">Professional</option>
                                <option value="expert">Expert</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label for="hourlyRate">Hourly Rate ($)</label>
                            <input type="number" id="profileRate" name="hourlyRate" min="0" max="10000" placeholder="Optional" />
                        </div>
                    </div>
                    
                    <div class="form-actions">
                        <button type="button" class="btn btn-secondary" id="cancelProfile">Cancel</button>
                        <button type="submit" class="btn btn-primary">Save Profile</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</Layout>

<style>
    .dashboard-container {
        min-height: 100vh;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        background-attachment: fixed;
    }

    /* Loading State */
    .loading-container {
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

    .loading-spinner-large {
        width: 48px;
        height: 48px;
        border: 4px solid rgba(255, 255, 255, 0.3);
        border-top: 4px solid #ffffff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-bottom: 16px;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .loading-container p {
        color: white;
        font-size: 1.1rem;
        opacity: 0.9;
    }

    /* Dashboard Header */
    .dashboard-header {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-bottom: 1px solid rgba(255, 255, 255, 0.2);
        padding: 1.5rem 0;
        margin-bottom: 2rem;
    }

    .header-content {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 2rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .user-info {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .avatar {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        overflow: hidden;
        border: 3px solid #667eea;
    }

    .avatar img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .user-details h1 {
        font-size: 1.5rem;
        margin: 0 0 0.25rem 0;
        color: #1a202c;
    }

    .user-type {
        color: #718096;
        margin: 0;
        font-size: 0.9rem;
    }

    .artist-badge {
        margin-top: 0.5rem;
    }

    .badge {
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 500;
    }

    .header-actions {
        display: flex;
        gap: 1rem;
    }

    /* Main Content */
    .dashboard-main {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 2rem;
    }

    .stats-section {
        margin-bottom: 3rem;
    }

    .stats-section h2 {
        color: white;
        font-size: 1.5rem;
        margin-bottom: 1.5rem;
        text-align: center;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .stat-card {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 16px;
        padding: 2rem;
        display: flex;
        align-items: center;
        gap: 1rem;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .stat-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    }

    .stat-card.loading {
        opacity: 0.7;
    }

    .stat-icon {
        font-size: 2.5rem;
        opacity: 0.8;
    }

    .stat-content {
        flex: 1;
    }

    .stat-number {
        font-size: 2rem;
        font-weight: bold;
        color: #1a202c;
        margin-bottom: 0.25rem;
    }

    .stat-label {
        color: #718096;
        font-size: 0.9rem;
        font-weight: 500;
    }

    /* Actions Section */
    .actions-section {
        margin-bottom: 3rem;
    }

    .actions-section h2 {
        color: white;
        font-size: 1.5rem;
        margin-bottom: 1.5rem;
        text-align: center;
    }

    .actions-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 1.5rem;
    }

    .action-card {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 16px;
        padding: 2rem;
        display: flex;
        align-items: center;
        gap: 1rem;
        text-decoration: none;
        color: inherit;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        border: 1px solid rgba(255, 255, 255, 0.2);
        cursor: pointer;
    }

    .action-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    }

    .action-card.primary {
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
    }

    .action-card.primary .action-content h3,
    .action-card.primary .action-content p {
        color: white;
    }

    .action-icon {
        font-size: 2rem;
        opacity: 0.8;
    }

    .action-content h3 {
        font-size: 1.1rem;
        margin: 0 0 0.5rem 0;
        color: #1a202c;
    }

    .action-content p {
        color: #718096;
        margin: 0;
        font-size: 0.9rem;
    }

    /* Content Section */
    .content-section {
        margin-bottom: 3rem;
    }

    .content-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
        gap: 2rem;
    }

    .content-card {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 16px;
        padding: 2rem;
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .content-card h3 {
        color: #1a202c;
        margin: 0 0 1.5rem 0;
        font-size: 1.2rem;
    }

    .content-list {
        max-height: 300px;
        overflow-y: auto;
    }

    .loading-item {
        color: #718096;
        text-align: center;
        padding: 1rem;
        font-style: italic;
    }

    .activity-item {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 1rem 0;
        border-bottom: 1px solid #e2e8f0;
    }

    .activity-item:last-child {
        border-bottom: none;
    }

    .activity-icon {
        font-size: 1.5rem;
    }

    .activity-content p {
        margin: 0 0 0.25rem 0;
        color: #1a202c;
    }

    .activity-time {
        font-size: 0.8rem;
        color: #718096;
    }

    /* Buttons */
    .btn {
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        border: none;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
        text-decoration: none;
        display: inline-block;
        text-align: center;
    }

    .btn-primary {
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
    }

    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
    }

    .btn-secondary {
        background: #f7fafc;
        color: #4a5568;
        border: 1px solid #e2e8f0;
    }

    .btn-secondary:hover {
        background: #edf2f7;
    }

    .btn-outline {
        background: transparent;
        color: #667eea;
        border: 2px solid #667eea;
    }

    .btn-outline:hover {
        background: #667eea;
        color: white;
    }

    /* Modal Styles */
    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        backdrop-filter: blur(5px);
    }

    .modal-content {
        background: white;
        border-radius: 16px;
        max-width: 500px;
        width: 90%;
        max-height: 90vh;
        overflow-y: auto;
    }

    .modal-content.large {
        max-width: 800px;
    }

    .modal-header {
        padding: 2rem 2rem 1rem 2rem;
        border-bottom: 1px solid #e2e8f0;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .modal-header h2 {
        margin: 0;
        color: #1a202c;
    }

    .modal-close {
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
        color: #718096;
        padding: 0;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .modal-close:hover {
        color: #1a202c;
    }

    .modal-body {
        padding: 2rem;
    }

    .form-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .form-group {
        display: flex;
        flex-direction: column;
    }

    .form-group label {
        margin-bottom: 0.5rem;
        font-weight: 500;
        color: #1a202c;
    }

    .form-group input,
    .form-group textarea,
    .form-group select {
        padding: 0.75rem;
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        font-size: 1rem;
        transition: border-color 0.2s ease;
    }

    .form-group input:focus,
    .form-group textarea:focus,
    .form-group select:focus {
        outline: none;
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }

    .form-group textarea {
        min-height: 100px;
        resize: vertical;
    }

    .form-actions {
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
        .header-content {
            flex-direction: column;
            gap: 1rem;
            text-align: center;
        }

        .header-actions {
            justify-content: center;
        }

        .stats-grid,
        .actions-grid {
            grid-template-columns: 1fr;
        }

        .content-grid {
            grid-template-columns: 1fr;
        }

        .dashboard-main {
            padding: 0 1rem;
        }

        .form-grid {
            grid-template-columns: 1fr;
        }

        .form-actions {
            justify-content: stretch;
        }

        .form-actions .btn {
            flex: 1;
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', async () => {
        const loadingState = document.getElementById('loadingState');
        const dashboardContent = document.getElementById('dashboardContent');
        const profileBtn = document.getElementById('profileBtn');
        const logoutBtn = document.getElementById('logoutBtn');
        const profileModal = document.getElementById('profileModal');
        const closeProfileModal = document.getElementById('closeProfileModal');
        const cancelProfile = document.getElementById('cancelProfile');
        const profileForm = document.getElementById('profileForm');

        // Check authentication and load user data
        try {
            const response = await fetch('/api/auth/validate');
            const data = await response.json();

            if (!data.authenticated) {
                window.location.href = '/auth/login?redirect=/dashboard/artist';
                return;
            }

            // Verify user is an artist
            if (data.user.user_type !== 'artist') {
                // Redirect non-artists to regular dashboard
                window.location.href = '/dashboard';
                return;
            }

            // Update UI with user data
            updateUserInfo(data.user);
            
            // Load dashboard data
            await loadDashboardStats();
            
            // Show dashboard
            loadingState.style.display = 'none';
            dashboardContent.style.display = 'block';

        } catch (error) {
            console.error('Authentication check failed:', error);
            window.location.href = '/auth/login?redirect=/dashboard/artist';
        }

        function updateUserInfo(user) {
            document.getElementById('welcomeMessage').textContent = 
                `Welcome back, ${user.name || 'Artist'}!`;
            
            if (user.avatar_url) {
                document.getElementById('userAvatar').src = user.avatar_url;
            }

            // Pre-fill profile form
            document.getElementById('profileName').value = user.name || '';
            document.getElementById('profileBio').value = user.bio || '';
            document.getElementById('profileLocation').value = user.location || '';
            document.getElementById('profileWebsite').value = user.website_url || '';
            
            // Artist-specific fields
            document.getElementById('profileStageName').value = user.stage_name || '';
            document.getElementById('profileGenres').value = 
                Array.isArray(user.genres) ? user.genres.join(', ') : (user.genres || '');
            document.getElementById('profileExperience').value = user.experience_level || '';
            document.getElementById('profileRate').value = user.hourly_rate || '';
        }

        // Profile modal
        profileBtn.addEventListener('click', () => {
            profileModal.style.display = 'flex';
        });

        closeProfileModal.addEventListener('click', () => {
            profileModal.style.display = 'none';
        });

        cancelProfile.addEventListener('click', () => {
            profileModal.style.display = 'none';
        });

        // Close modal when clicking outside
        profileModal.addEventListener('click', (e) => {
            if (e.target === profileModal) {
                profileModal.style.display = 'none';
            }
        });

        // Profile form submission
        profileForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = new FormData(profileForm);
            const genres = formData.get('genres');
            
            const profileData = {
                name: formData.get('name'),
                bio: formData.get('bio'),
                location: formData.get('location'),
                website_url: formData.get('website'),
                stage_name: formData.get('stageName'),
                genres: genres ? genres.split(',').map(g => g.trim()).filter(g => g) : [],
                experience_level: formData.get('experienceLevel'),
                hourly_rate: formData.get('hourlyRate') ? parseFloat(formData.get('hourlyRate')) : null
            };

            try {
                const response = await fetch('/api/auth/profile', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(profileData)
                });

                const data = await response.json();

                if (data.success) {
                    alert('Artist profile updated successfully!');
                    profileModal.style.display = 'none';
                    location.reload();
                } else {
                    alert(data.error || 'Failed to update profile');
                }
            } catch (error) {
                console.error('Profile update error:', error);
                alert('Connection error. Please try again.');
            }
        });

        // Logout
        logoutBtn.addEventListener('click', async () => {
            try {
                const response = await fetch('/api/auth/logout', {
                    method: 'POST'
                });

                if (response.ok) {
                    window.location.href = '/';
                } else {
                    alert('Logout failed. Please try again.');
                }
            } catch (error) {
                console.error('Logout error:', error);
                alert('Logout failed. Please try again.');
            }
        });

        // Action buttons
        document.getElementById('portfolioBtn')?.addEventListener('click', () => {
            alert('Portfolio management coming soon!');
        });

        document.getElementById('promotionBtn')?.addEventListener('click', () => {
            alert('Promotion tools coming soon!');
        });

        document.getElementById('settingsBtn')?.addEventListener('click', () => {
            profileModal.style.display = 'flex';
        });

        // Load dashboard stats
        async function loadDashboardStats() {
            try {
                const response = await fetch('/api/dashboard/stats');
                const data = await response.json();

                if (data.success) {
                    updateStats(data.stats);
                    updateActivity();
                }
            } catch (error) {
                console.error('Failed to load stats:', error);
            }
        }

        function updateStats(stats) {
            document.getElementById('totalEvents').textContent = 
                stats.events?.total_events || 0;
            document.getElementById('publishedEvents').textContent = 
                stats.events?.published_events || 0;
            document.getElementById('eventLikes').textContent = 
                stats.eventLikes || 0;
            document.getElementById('followers').textContent = 
                stats.followers || 0;

            // Remove loading state
            document.querySelectorAll('.stat-card').forEach(card => {
                card.classList.remove('loading');
            });
        }

        function updateActivity() {
            const activityFeed = document.getElementById('activityFeed');
            activityFeed.innerHTML = `
                <div class="activity-item">
                    <div class="activity-icon">üé®</div>
                    <div class="activity-content">
                        <p>Welcome to your artist dashboard!</p>
                        <span class="activity-time">Just now</span>
                    </div>
                </div>
                <div class="activity-item">
                    <div class="activity-icon">üìù</div>
                    <div class="activity-content">
                        <p>Complete your artist profile to get more visibility</p>
                        <span class="activity-time">Tips</span>
                    </div>
                </div>
            `;

            const recentEvents = document.getElementById('recentEvents');
            recentEvents.innerHTML = `
                <div class="loading-item">
                    <p>No events yet. <a href="/submit" style="color: #667eea;">Create your first event</a>!</p>
                </div>
            `;
        }
    });
</script> 